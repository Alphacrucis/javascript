#target indesign#targetengine jrh#include "../util/lib/PDFPages.jsx"function PersonalizarExtracto(pdfFile){	if (pdfFile == undefined)		throw "No se ha indicado ningún fichero PDF de origen.";			this.getByLabel = function(doc, label)		{			for (var i=0; i<doc.allPageItems.length; ++i)				if (doc.allPageItems[i].label === label)					return doc.allPageItems[i];								return null;		};	this.exportar = null;		this.digits = 2;	this.SEP = '_';	this.box1 = this.getByLabel(app.activeDocument, "BOX1");	this.box2 = this.getByLabel(app.activeDocument, "BOX2");		if (this.box1 == null || this.box2 == null)		return alert("Error: es necesario tener dos cajas gráficas etiquetadas como BOX1 y BOX2");		this.pdfFile = pdfFile;		if (pdfFile.fullName.indexOf(this.SEP) >= 0)		this.fileBase = pdfFile.fullName.split(this.SEP).slice(0, -1).join(this.SEP) + this.SEP;	else		this.fileBase = pdfFile.fullName.slice(0, pdfFile.fullName.indexOf('.pdf')) + this.SEP;		this.fileExt  = '.' + pdfFile.fullName.split('.').slice(-1);	this.dstDir = this.fileBase.split('/').slice(0, -1).join('/')                 + '/dst_' + this.pdfFile.fullName.split('.')[0].slice(-3) + '/';			this.showPrintOptions = true;		return this;}/* NO USADO: por ahora no se usa esta interfaz de usuario */function UI(){	var w = 		"""dialog { 			orientation:'column',			mp: Panel 			{ 				ge : Group 				{					orientation:'row',					label1: StaticText { text:'PDF de origen:', },					f_pdf : EditText { text:'', preferredSize:[200,20], },					btnEx : Button { text:'..', preferredSize:[20,20], },				},				gs : Group				{					orientation:'row',					lb1: StaticText {text:'Desde página:',},					fromPage: EditText {text:'01',},					lb2: StaticText {text:'hasta página:',},					toPage: EditText {text:'',},				},				gc : Group 				{					toPDF: RadioButton {text:'Exportar a PDF', value:true},					toPrint: RadioButton {text:'Enviar a impresora'},					toJPG: RadioButton {text:'Exportar a JPG', value:false},				},			}, 			gb: Group 			{ 				btnOK : Button { text:'Aceptar', }, 				btnCn : Button { text:'Cancelar', }, 			}, 		}"""			var dlg = new Window(w);		dlg.result =  { aceptar:false };		dlg.gb.btnCn.onClick = function() { this.window.close(); }	dlg.mp.ge.btnEx.onClick = function() { this.window.mp.ge.f_pdf.text = File.openDialog().fullName; }	dlg.gb.btnOK.onClick = function() 	{ 		this.window.result = { aceptar:true, 							  desdePagina:this.window.mp.gs.fromPage.text,							  hastaPagina:this.window.mp.gs.tPage.text,							  toPDF:this.window.mp.gc.toPDF.value,							  toPrint:this.window.mp.gc.toPrint.value,							  toJPG:this.window.mp.gc.toJPG.value,							}; 		this.window.close();	}	dlg.show();		return dlg.result;			}function InfoWindow(iter){	this.createProgressBar = function(iter)	{		this.wndResource =		"""window 		 { 			orientation:'row', 			alignChildren:'bottomr', 			text: 'Personalizando extracto', 			mainPanel: Panel 			{ 				label1: StaticText { text: 'Progreso total', preferredSize:[350, 20], }, 				pgBar1: Progressbar { text: '', preferredSize:[350, 10], maxvalue:'" + iter + "' }, 				labelLog: StaticText { text: '', preferredSize:[350,20], }, 				cancel: Button { text:'Cancel', }, 			}, 		 }"""		this.wnd = new Window(this.wndResource);		this.wnd.mainPanel.cancel.onClick = function() { this.wnd.cancelar = true; this.wnd.close; }		this.wnd.cancelar = false;		this.wnd.cancelElement = this.wnd.mainPanel.cancel;	}	this.step = function()	{		this.wnd.mainPanel.pgBar1.value = (this.wnd.mainPanel.pgBar1.value + 1);	}	this.show = function() { this.wnd.show(); }	this.close = function() { this.wnd.cancelar = true; this.wnd.close(); }	this.hide = function() { this.wnd.hide(); }	this.update = function() { this.hide(); this.show(); }	this.message = function(msg) { this.wnd.mainPanel.labelLog.text = msg; }	this.title = function(tlt) { this.wnd.mainPanel.label1.text = tlt; } 	this.reset = function(init) { this.wnd.mainPanel.pgBar1.value = init; }	this.createProgressBar(iter);				return this;}PersonalizarExtracto.prototype.formatInteger = function(value){	value = value + "";	while ( value.length < this.digits )		value = '0' + value;			return value;}PersonalizarExtracto.prototype.destinoExportar = function()// Muestra elección de exportación: a impresora o a pdf.{	var rsc =	"""dialog { 		mPanel : Panel 		{ 			radioButtonPDF: RadioButton {text:'Exportar a PDF', value:true},			radioButtonPrint: RadioButton {text:'Enviar a impresora'},			radioButtonJPG: RadioButton {text:'Exportar a JPG', value:false},		},		mButton : Group 		{			ok: Button { text:'Ok',  },		}, 			}""";	var dlg = new Window(rsc);	dlg.show();		if (dlg.mPanel.radioButtonPrint.value)		this.exportar = function(p1, p2) 		{ 			app.activeDocument.recompose();			app.activeDocument.print(this.showPrintOptions); 		}	else if (dlg.mPanel.radioButtonPDF.value)	{		if (!Folder(this.dstDir).exists)			Folder(this.dstDir).create();				this.exportar = function(p1, p2) 		{ 			var path = this.dstDir + 'pdf_' + p1 + '_' + p2 + ".pdf";		             // trata de asegurarse que el pdf colocado esté actualizado FIXME            app.activeDocument.recompose();            app.activeDocument.updateCrossReferences();            app.activeDocument.links.everyItem().update();            $.sleep(1500);            //~			app.activeDocument.exportFile(ExportFormat.pdfType, new File(decodeURI(path)), 				this.showPrintOptions);		}	}	else if (dlg.mPanel.radioButtonJPG.value)	{		if (!Folder(this.dstDir).exists)			Folder(this.dstDir).create();				this.exportar = function(p1, p2) 		{ 			var path = this.dstDir + 'jpg_' + p1 + '_' + p2 + ".jpg";		             $.sleep(2000);			app.activeDocument.exportFile(ExportFormat.JPG, new File(decodeURI(path)), 				this.showPrintOptions);					}	}}PersonalizarExtracto.prototype.placePDF = function(box, page){	app.pdfPlacePreferences.transparentBackground = true;	app.pdfPlacePreferences.pageNumber = page;	app.pdfPlacePreferences.pdfCrop = PDFCrop.CROP_MEDIA;		return box.place(this.pdfFile)[0];}PersonalizarExtracto.prototype.do_export = function(ini, max){	var i = ini == undefined ? 1 : ini;	var max_pages = (max == undefined) ? pageCountPDF(this.pdfFile) : max; 		this.pbar = new InfoWindow(max_pages != undefined ? parseInt(max_pages / 2) : i);	this.pbar.show();		var firstPage = undefined;		while (i < max_pages)	{		var p1 = this.formatInteger(i);		var p2 = this.formatInteger(i+1);				this.pbar.message(this.dstDir + 'pdf_' + p1 + '_' + p2 + ".pdf");				try {			var pdfPlaced = this.placePDF(this.box2, i);							if (i == ini)				firstPage = pdfPlaced.pdfAttributes.pageNumber;			else 				if (pdfPlaced.pdfAttributes.pageNumber == firstPage)					break;						this.placePDF(this.box1, i+1);								this.box1.allGraphics[0].itemLink.update();			this.box2.allGraphics[0].itemLink.update();			app.activeDocument.recompose();			app.select(this.box1);			app.select(this.box2);									this.exportar(p1, p2);						if (this.showPrintOptions) 				this.showPrintOptions = false;										this.pbar.step();						i += 2;		}		catch (e) { 			this.pbar.close();			throw ('Proceso abortado en la página del pdf: [' + i + '].\n' + e);		}	}	this.pbar.close();}PersonalizarExtracto.prototype.run = function(){			this.destinoExportar();		var input = prompt("Indicar el rango de páginas a tratar:", "1-"+pageCountPDF(this.pdfFile), "Páginas en el PDF");	//	if (input == '') return ;		var firstPage = 1;	if (input.indexOf('-') >= 0)	{        var sep = input.split('-');        firstPage = parseInt(sep[0]);        input = sep[1];	}	var lastPage = input != '' ? parseInt(input) : 99;		this.do_export(firstPage, lastPage);	}// ---------------------------------------------------------------------------------------------------------------------// ---------------------------------------------------------------------------------------------------------------------main();function main(){	var pe = new PersonalizarExtracto(File.openDialog("Carpeta origen"));	pe.run();}