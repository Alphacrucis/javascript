#target indesign/*	 *	ProcesadorMAILING *	Implementa un objeto delegado para PersonalizarMailing.procesarDato.  *	Para ello ha de implementar la función procesar(columnas, datos) que es la forma *	de comunicación entre delegado y delegador. *	 *	Particularmente este delegado inserta los datos indicados en una caja dentro de la página *	de indesign. */function ProcesadorMAILING(command, columnas) {	this.etiqueta = 'PERSONALIZAR';	this.estimado = 'ESTIMADO';	this.baretiq  = 'BARCODE';	this.elemento = null;	this.saludo   = null;	this.barcode  = null;	this.carets   = new Array(		"§","º",		"#","Ñ",		"¦","º",	);	this.postProceso = command;}/*  Busca el objeto con la etiqueda de personalización, busca en el entorno de obj.	Normalmente obj será una página */ProcesadorMAILING.prototype.buscarEtiqueta = function(obj) {	for (var i=0; i<obj.allPageItems.length; i++) {		if (obj.allPageItems[i].label == this.etiqueta) {			this.elemento = obj.allPageItems[i];			if (this.saludo != null && this.barcode != null)				return ;		}					// Busca si hay saludo		if (obj.allPageItems[i].label == this.estimado) {			this.saludo = obj.allPageItems[i];			if (this.elemento != null && this.barcode != null)				return ;		}					// Busca si hay barcode		if (obj.allPageItems[i].label == this.baretiq) {			this.barcode = obj.allPageItems[i];			if (this.elemento != null && this.saludo != null)				return ;		}				}}ProcesadorMAILING.prototype.trim = function(str) {	if (str == undefined || str == null)		return null;	while (str.slice(-1) === ' ') str = str.substring(0, str.length - 1);	while (str[0] === ' ') str = str.substring(1, str.length);		return str;}ProcesadorMAILING.prototype.procesar = function(col, datos) {	var p = function(i) 		{ 			var r = ProcesadorMAILING.prototype.trim(datos[col[i]]);					if (r == undefined || r == null)				return null;			if (r[0] == '"' && r.slice(-1) == '"')				r = r.slice(1,-1);			return r;		}			this.insertar(p(0), // nombre				 p(1), // apellidos				 p(2), // dirección				 p(3), // cp				 p(4), // provincia				 p(5), // sexo				 p(6)  // barcode 				 ); 				 	this.postProceso.run();}ProcesadorMAILING.prototype.cambiarCarets = function(cadena) {	for (var i=0; i<this.carets.length/2; i+=2) 		cadena = cadena.replace(this.carets[i], this.carets[i+1]);		cadena = cadena.replace("\u0090", "E");		return cadena;}ProcesadorMAILING.prototype.insertar = function(nombre, apellidos, direccion, cp, provincia, sexo, barcode) {	this.elemento.contents = this.cambiarCarets(apellidos + ', ' + nombre) + "\n" 							+ this.cambiarCarets(direccion) + "\n" 							+ cp + " - " + this.cambiarCarets(provincia);			if (this.saludo !== null)	{		var tileCase = function(nombre)			{				var d = nombre.split(' ');				for (var i=0; i<d.length; i++)					if (d[i] != 'DEL')						d[i] = d[i][0].toUpperCase() + d[i].slice(1).toLowerCase();					else						d[i] = d[i].toLowerCase();				return d.join(' ');			}				if (sexo.toUpperCase() === 'V')			this.saludo.contents = 'Estimado ' + tileCase(nombre)		else			this.saludo.contents = 'Estimada ' + tileCase(nombre);	}	if (this.barcode !== null && barcode != null)	{		this.barcode.contents = barcode;	}}/* ******************************************************************************************* *//*	PersonalizarMailing	*/function PersonalizarMailing(separador, cols) {	this.columnas = cols;		if (this.columnas == undefined)		this.columnas = new Array(7, 8, 2, 4, 3, 6, 9); // secuencia de columnas por defecto			this.datos = null;	this.fichero = null;	this.sep = separador;		this.toString = function() { return "OBJETO: PERSONALIZAR MAILING"; };		return this;}PersonalizarMailing.prototype.abrirDatos = function (archivo, cabeceras) {	this.fichero = File(archivo);	this.fichero.open("r");		// Lee las cabeceras de las columnas y las ignora	if (cabeceras)		this.fichero.readln();		// this.columnas = (this.fichero.readln()).split(this.sep);}	PersonalizarMailing.prototype.cerrarDatos = function() {	this.fichero.close();}PersonalizarMailing.prototype.siguienteDato = function() {	if (!this.fichero.eof) {		this.datos = this.fichero.readln().split(this.sep);		return true;	} else		return false;}/* 	Procesa el útlimo dado leido. El proceso real sobre el dato es cosa del objeto	argumento delegator. Esto se, se delega en dicho objeto la acción a ejecutar. */PersonalizarMailing.prototype.procesarDato = function(delegator) {	delegator.procesar(this.columnas, this.datos);}/* ******************************************************************************************* *//*	ExportadorPDF		*/function ExportadorPDF(document, destino, nombre, opcionExportacionIndex) {	this.carpetaDestino = destino;	this.nombreBase = nombre;	this.documento = document;		this.contador = 0;	this.exportPDF_prefExportacion = app.pdfExportPresets[opcionExportacionIndex];	app.pdfExportPreferences.viewPDF = false;	this.contador000 = function() {		var str = this.contador.toString();		while (str.length < 3)			str = '0' + str;					return str;	}		return this;}ExportadorPDF.prototype.exportarPagina = function(pagina) {    if (pagina !== undefined) {        var pagNum = pagina.name;        app.pdfExportPreferences.pageRange = pagNum;        pagNum = pagNum.replace(new RegExp(":","gi"), "_");    }    this.contador++;    var path = this.carpetaDestino + this.nombreBase + this.contador000() + ".pdf";    this.documento.exportFile(ExportFormat.pdfType, new File(path), (this.contador == 1));    this.documento.links.everyItem().update();}ExportadorPDF.prototype.imprimirPagina = function() {    this.contador++;    this.documento.print((this.contador == 1))    this.documento.links.everyItem().update();}ExportadorPDF.prototype.run = function() { 	this.exportarPagina(); }/* ******************************************************************************************* */function ExportadorImpresora(document, impresoraIndex) {	this.documento = document;	this.documento.printPreferences.copies = 1;		this.impresoraIndex = impresoraIndex;	this.contador = 0;		return this;}ExportadorImpresora.prototype.run = function() {//	this.documento.printPreferences.pageRange = "1";	this.documento.print(!this.contador);	this.contador++;}/* ******************************************************************************************* */function JSProgressBar(iter, title, parent){	var wndResource =		"window \		 { \			orientation:'row', \			alignChildren:'bottom', \			text: 'PROGRESO', \			mainPanel: Panel \			{ \				label1: StaticText { text: 'Progreso total', preferredSize:[275, 20], }, \				pgBar1: Progressbar { text: '', preferredSize:[275, 10], }, \				labelLog: StaticText { text: '', preferredSize:[275,20], }, \			}, \		 }"	this.wnd = new Window(wndResource);	this.wnd.mainPanel.pgBar1.maxvalue = iter;		if (parent instanceof Window) 		this.PARENT = parent;		if (title != undefined)		this.wnd.text = title;	this.increment = function(msg)	{		this.wnd.mainPanel.pgBar1.value++;		if (msg != undefined)			this.wnd.mainPanel.label1.text = msg;	}	this.show = function() 	{ 		this.wnd.show(); 		if (this.PARENT != undefined && this.PARENT.visible)			this.wnd.frameLocation.y = this.PARENT.frameLocation.y - Math.round(this.wnd.size.height * 1.5);	}		this.close = function() { this.wnd.close(); }	this.hide = function() { this.wnd.hide(); }		return this;}/* ******************************************************************************************* */function main() {    const default_dataFile = '~/Desktop/Seguros_Medicos_Cancelados.csv';	var dataFile;        if (File(default_dataFile).exists)        dataFile = File(default_dataFile);    else        dataFile = File.openDialog( "Indicar origen de archivo de datos CSV", 								function(file) // lambda predicate ≈ is extension == csv? 								{ 									return (file.name.lastIndexOf('.') == -1) 										|| (file.name.substring(										    file.name.lastIndexOf('.') + 											1).toLowerCase() == 'csv'); 								}, 								false);                                	if (dataFile) {        var dstPath, dst;                if (! confirm('¿Enviar directamente a la impresora?\nEn otro caso, generar PDF.'))        {            dstPath = dataFile.path + '/dst/';            if (!Folder(dstPath).exists)                Folder(dstPath).create();            dst = new ExportadorPDF(app.activeDocument, dstPath, "fid_", 6);        } else            dst = new ExportadorImpresora (app.activeDocument, 0);        var pd = new ProcesadorMAILING(dst);        var sep = ";"; // prompt("Importación de CSV", ";", "Símbolo separador");        var pm = new PersonalizarMailing(sep);        pd.buscarEtiqueta(app.activeWindow.activePage);        pm.abrirDatos(dataFile, /* Cabeceras */ false);        var pb = new JSProgressBar(27, "Personalizando Mailing");        pb.show();        while (pm.siguienteDato()) {	        pm.procesarDato(pd);        pb.increment('Elemento ' + dst.contador + ' --> ' + pm.datos[pm.columnas[0]]);        }        pm.cerrarDatos();        pb.close();	}}main();