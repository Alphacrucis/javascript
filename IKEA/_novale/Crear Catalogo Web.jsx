#target "Indesign"#targetengine "medianis"#strict on// http://extendables.org/#include "~/_scripts/frameworks/Extendables/extendables.jsx"// custom extensions#include "~/_scripts/lib/indesign.jsx"#include "~/_scripts/lib/logs.jsx"var IKEA_CODE = /\d{3}\.\d{3}\.\d{2}/gm ;// Etiqueta la lista de textframes, según coincidencia con la expresión regularfunction labelTextFrames(textFrames, ikea_codes){    textFrames.forEach( function(tf) {        if (ikea_codes && IKEA_CODE.text(tf.contest)) {            var c = tf.contents.match(regex);            var re = [];            c.forEach( function(e) { if (re.contains()) re.push(e); } );                    tf.label = re.join(',');        } else if (!ikea_codes && has_codalm(tf)) {            var r = [];            tf.words.everyItem().getElements().forEach( function(w) {                if (w.appliedCharacterStyle.name == 'AlmCOD')                    r.push(w.contents);            });            tf.label = r.join(',');        }    } );}function createWebLayer(){    // detectar si el documento tiene códigos cortos (alm) o largos    var hasIKEACodes = IKEA_CODE.test( app.activeDocument.stories.everyItem().contents.toString() );    var match = ( hasIKEACodes )               ? textFramesMatching_IKEA               : textFramesMatching_ALM;        if (layerByName(app.activeDocument, 'web') != null)        return app.activeDocument.allPageItems                  .filter( function(e) { return e.itemLayer.name == 'web' } );            var textFrames = match(app.activeDocument, IKEA_CODE);        moveTextFrames(textFrames, "codigos");        var webTextFrames = cloneTextFrames(textFrames, "web");    labelTextFrames(webTextFrames, hasIKEACodes);        layerByName(app.activeDocument, "codigos").visible = false;        return webTextFrames;}// Busca todas las cajas de texto cuyo contenido cumpla la expresión regularfunction textFramesMatching_ALM(container){    return container.allPageItems.filter( function(item) {        return item.has_own('contents') && (has_codalm(item));    } );}// Busca todas las cajas de texto cuyo contenido cumpla la expresión regularfunction textFramesMatching_IKEA(container, rg){    return container.allPageItems.filter( function(item) {        return item.has_own('contents') && (rg.test(item.contents));    } );}function has_codalm(item) {    var cs = item.words.everyItem().appliedCharacterStyle;        for (var i=0,e=cs.length; i<e; ++i)        if (cs[i].name === 'AlmCOD')            break;    return i<e;}function sanitize(textFrame){    if (textFrame.overflows)        textFrame.fit(FitOptions.FRAME_TO_CONTENT);     if (textFrame.geometricBounds[2] > app.activeDocument.pages[0].bounds[2])        textFrame.geometricBounds[3] += 150;     textFrame.recompose();}function editContent(textFrame) {           var words = textFrame.words.everyItem().getElements();        for (var i=words.length; i>0; --i) {        var w = words[i-1];        var c = w.contents;                if (!/\s+/mg.test(w.contents)) {            if (w.appliedCharacterStyle.name == 'AlmCOD') {                 w.contents = w.contents + '\r\r'; continue;             }            if (w.fontStyle == 'Bold') continue;            if (IKEA_CODE.test(w.contents.toString())) {                 w.contents = w.contents + '\r\r'; continue;             }        }        w.remove();    }    if (textFrame.overflows) {        var vb = textFrame.visibleBounds;        textFrame.visibleBounds = [vb[0], vb[1], vb[2]+40, vb[3]];    }    findChangeGrep_Prepare();    findChangeGrep(textFrame, "  +", " ");}function prepareContentToWeb(textFrames){    var pg = W.pgBar;    pg.value = 0;    pg.maxvalue = textFrames.length;        var errors = [];    textFrames.forEach( function(tf) {        try {            editContent(tf);             pg.step(tf.label);        } catch(e) {             pg.step('Error en TextFrame ID:' + tf.id + ' | ' + tf.label + ' =>' + e);             errors.push(tf.id); } ;    } );    return errors;}function UI() {    var wnd = new Window('palette', 'Catálogo WEB');    wnd.message = wnd.add('statictext', undefined, "Preparando Capas de documento");    wnd.pgBar = wnd.add('progressbar');    wnd.pgBar.preferredSize = [300, ""];        wnd.pgBar.step = function(msg) {        var f = false;        if (!app.scriptPreferences.enableRedraw)            { app.scriptPreferences.enableRedraw = true; f = true; }                    this.value++;        if (msg) this.window.message.text = msg;                if (f) app.scriptPreferences.enableRedraw = false;	}        return wnd;}var W;function main(){     W = UI();    W.show();        app.scriptPreferences.enableRedraw = false;        var frames = createWebLayer();    var errors = prepareContentToWeb(frames);    log_saveTo(errors, Folder.temp + '/catalogo.txt', true);    W.close();    app.scriptPreferences.enableRedraw = true;}app.doScript(main,    ScriptLanguage.JAVASCRIPT   , null  , UndoModes.ENTIRE_SCRIPT   , 'Catalogo WEB');