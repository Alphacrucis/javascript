#target "InDesign"#targetengine "jrh"#strict on#include "~/_scripts/lib/timer.jsx"var IKEACodeType = { IKEACODE_PIAFACTS:'PIAFACTS', IKEACODE_ALM:'ALM' };var DEBUG = undefined;/** ----------------------------------------------------------------------------------------------------------------	IKEACodesInDocument Object	----------------------------------------------------------------------------------------------------------------	*/function IKEACodesInDocument(doc, cachedFile, IKEACodeTypeInDocument){	this.ERROR_MSG_NOSTYLE = "Atención, el estilo de carácter AlmCOD no existe. No se puede continuar.";	this.ERROR_MSG_NOCODE = "\tNo disponible.";	this.ERROR_MSG_NODOCUMENT = "No se ha indicado un documento válido";	this.ERROR_MSG_IKEACODETYPE = "El tipo de código IKEA en página no es válido";	this.ALM_CHARSTYLE = 'AlmCOD';	if (doc == undefined || doc == null || doc.constructor.name != 'Document')	{		if (app.activeDocument !== undefined)		{			alert('Se usará el documento activo');			doc = app.activeDocument;		}		else			throw this.ERROR_MSG_NODOCUMENT;	}	if (IKEACodeTypeInDocument !== IKEACodeType.IKEACODE_PIAFACTS && 	    IKEACodeTypeInDocument !== IKEACodeType.IKEACODE_ALM	) throw this.ERROR_MSG_IKEACODETYPE;		this.codeType = IKEACodeTypeInDocument;		this.isAlmCode = function() { return this.codeType == IKEACodeType.IKEACODE_ALM; }		if (this.isAlmCode())		this.searchString = '\\<[[:upper:]]{3,4}\\>';	else		this.searchString = '\\<\\d{3}\\.\\d{3}\\.\\d{2}\\>';	this.document = doc;		// if AlmCOD style not in document, create 	if (doc.characterStyles.itemByName(this.ALM_CHARSTYLE) == null)	{		doc.characterStyles.add({name:'AlmCOD'});		alert('Atención, el estilo de carácter AlmCOD no existe. Se creará uno básico.');		this.error.push('El estilo de carácter "AlmCOD" no existía. Se creó uno básico.');	}		this.codes = []; // codes in document	this.codeEq = {}; // code equivalences	this.error = [];	this.codeInDocument = null; // al codes in document		this.cachedFile = cachedFile;	this.noCodes = [];	this.ignoreThisCodes = {'00000000':'IGNORE', 'IKEA':'IGNORE', 'PIN':'IGNORE'};	this.cachedFile = new File(cachedFile);		return this;}IKEACodesInDocument.prototype.script_bash = function(scode){	var script;		if (this.isAlmCode()) 		script = 'do shell script "/usr/bin/curl -d \'cod_corto=' + scode + '&cod_largo=';	else		script = 'do shell script "/usr/bin/curl -d \'cod_corto=&cod_largo=' + scode;		script += '&campo=almcod&orden=asc&pag=1&ruta_base=codarticulos/\' ' +			 'http://zona.ikeasi.com/codarticulos/resultado.php"';				var result = app.doScript(script, ScriptLanguage.APPLESCRIPT_LANGUAGE);	try {		var result2 = result.split('<tr class="linea_color2"><td>')[1];		result2 = result2.split('</td><td>');		return new Array(result2[0], result2[1], result2[2]);			} catch(e) {		this.error.push(scode + this.ERROR_MSG_NOCODE);	}	return '';}IKEACodesInDocument.prototype.findCodesInDocument = function(){	// search al sort codes in page	app.findGrepPreferences.findWhat = this.searchString;	app.findGrepPreferences.appliedCharacterStyle = this.isAlmCode() ? this.ALM_CHARSTYLE : null;		this.codesInDocument = this.document.findGrep();		if (DEBUG) for (var i=0; i<this.codesInDocument.length; ++i) $.writeln(this.codesInDocument[i].contents);}IKEACodesInDocument.prototype.getCodeFromWeb = function(scode){	var code = this.script_bash(scode);		var i1 = (this.isAlmCode()) ? 0 : 1;	var i2 = (this.isAlmCode()) ? 1 : 0;	return (scode == code[i1]) ? code[i2] : '';}IKEACodesInDocument.prototype.findCodeEquivalence = function(i){	if (this.codeEq[this.codes[i]] == undefined || this.codeEq[this.codes[i]] == "")	{				this.codeEq[this.codes[i]] = this.getCodeFromWeb(this.codes[i]);		if (this.codeEq[this.codes[i]] !== '')			this.writeToCache(i);		else 		{			this.noCodes.push(this.codes[i]);			this.progressBar.message('Insertando código: ' + this.codes[i] + 								    ' [' + this.codeEq[this.codes[i]] + '] SIN CÓDIGO');		}	}	else 		this.progressBar.message('Insertando código: ' + this.codes[i] + ' [' + this.codeEq[this.codes[i]] + '] EN CACHÉ');}IKEACodesInDocument.prototype.processCodes = function(){		this.openCache();	for (var i=0, end=this.codesInDocument.length; i<end; ++i)	{					this.codes[i] = (this.isAlmCode()) ? this.codesInDocument[i].contents :                                               this.codesInDocument[i].contents.split('.').join('');																			if (this.ignoreThisCodes[this.codes[i]] == 'IGNORE')			continue;				this.progressBar.message('Buscando equivalencia para ' + this.codes[i]);		this.findCodeEquivalence(i);		this.progressBar.step();					if (this.progressBar.wnd.cancelar)			return ;			}	this.closeCache();}	IKEACodesInDocument.prototype.replaceCodes = function(){	// reset the findText preferences	app.findGrepPreferences.appliedParagraphStyle = null;		if (this.isAlmCode())	{		app.findGrepPreferences.appliedCharacterStyle = this.ALM_CHARSTYLE;		app.changeGrepPreferences.appliedCharacterStyle = app.activeDocument.characterStyles.item('[Ninguno]');	}	else	{		app.findGrepPreferences.appliedCharacterStyle = null;		app.changeGrepPreferences.appliedCharacterStyle = this.ALM_CHARSTYLE;	}		var savedUserInteractionLevel = app.scriptPreferences.userInteractionLevel;	app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;	this.progressBar.title('Insertando códigos');	this.progressBar.reset(0);		var code_equiv;	for (var i=0, end=this.codes.length; i<end; ++i)	{			code_equiv = this.codeEq[this.codes[i]];				if (code_equiv == '')			this.error.push(this.codes[i] + this.ERROR_MSG_NOCODE);		else {			this.doReplacement(code_equiv, this.codes[i]);			this.progressBar.message('Insertando código: ' + this.codes[i] + ' [' + code_equiv + ']');		}				this.progressBar.step();				if (this.progressBar.wnd.cancelar)			break ;	}	app.scriptPreferences.userInteractionLevel = savedUserInteractionLevel;}IKEACodesInDocument.prototype.doReplacement = function(codeEq, code){		if (codeEq == undefined || code == undefined) return ;		try {		app.findGrepPreferences.findWhat = this.isAlmCode()   ? '\\<' + code + '\\>' : 															'\\<' + this.formatLargeCode(code) + '\\>';		app.changeGrepPreferences.changeTo = this.isAlmCode() ? this.formatLargeCode(codeEq) : codeEq;			app.changeGrep();	} catch(e) { alert(e); }}IKEACodesInDocument.prototype.formatLargeCode = function(lcode){	if (lcode === undefined)		return ;			if (lcode.split('.').length == 1)	{		while (lcode.length < 8) lcode = '0' + lcode;		var rcode = lcode.slice(0,3) + '.' + lcode.slice(3,6) + '.' + lcode.slice(6);				return rcode;	}	return lcode;}IKEACodesInDocument.prototype.loadCachedCodes = function(){	// if IKEACodeType.IKEACODE_ALM read in the form this.codeEq['xxx.xxx.xx'] = 'XXX'	// else if IKEACodeType.IKEACODE_PIAFACTS read in the form this.codeEd['XXX'] = 'xxx.xxx.xx'	if (File(this.cachedFile).exists)	{		var f = new File(this.cachedFile);		f.open('r');				while (!f.eof)		{			var cache = f.readln().split(',');						if (this.isAlmCode())				this.codeEq[cache[1]] = cache[0];			else				this.codeEq[cache[0]] = cache[1];		}			f.close();	}}IKEACodesInDocument.prototype.openCache = function(){	this.loadCachedCodes();	this.cachedFile.open("a");}IKEACodesInDocument.prototype.writeToCache = function(i){	// always save in for codeEq['xxx.xxx.xx'] = 'XXX'	if (this.isAlmCode())		this.cachedFile.writeln(this.codeEq[this.codes[i]] + ',' + this.codes[i]);	else		this.cachedFile.writeln(this.codes[i] + ',' + this.codeEq[this.codes[i]]);}IKEACodesInDocument.prototype.closeCache = function(){	this.cachedFile.close();}IKEACodesInDocument.prototype.errorInform = function(){	var wndResource =		"dialog \		 { \			orientation:'column', \			text: 'INFORMACIÓN DE ERRORES', \			mainPanel: Panel \			{ \				label1: StaticText { text:'Listado de códigos huérfanos.', }, \				listbox1: ListBox { preferredSize:[350, 200], }, \			}, \			bPanel: Group \			{ \				open:  Button { text:'Abrir como texto', }, \				close: Button { text:'Close', }, \			} \		 }"	var dlg = new Window(wndResource);	dlg.error = this.error;		dlg.bPanel.close.onClick = function() { dlg.close(); }	dlg.bPanel.open.onClick = function() 	{		var i=1;				while (File('~/tmp_codalm_errors_' + i + '.txt').exists) 			++i;				var f = new File('~/tmp_codalm_errors_' + i + '.txt');		f.open("w");		for (var i=0, end=this.window.error.length; i<end; ++i)			f.writeln(this.window.error[i]);					f.close();		f.execute();				dlg.close(); 	}			for (var i=0, end=this.noCodes.length; i<end; ++i)		dlg.mainPanel.listbox1.add('item', this.noCodes[i]);	dlg.show();}IKEACodesInDocument.prototype.run = function(){	this.findCodesInDocument();	this.progressBar = new ProgressBar(this.codesInDocument.length);	this.progressBar.show();	this.processCodes();	if (confirm('Buscar equivalencias terminado. ¿Reemplazar códigos en página?'))		this.replaceCodes();	this.progressBar.close();		if (this.noCodes.length > 0)		this.errorInform();}// ---------------------------------------------------------------------------------------------------------function ProgressBar(iter)// ---------------------------------------------------------------------------------------------------------{	this.createProgressBar = function(iter)	{		this.wndResource =			"window \			 { \				orientation:'row', \				alignChildren:'bottom', \				text: 'SUSTITUIR CÓDIGOS EN DOCUMENTO', \				mainPanel: Panel \				{ \					label1: StaticText { text: 'Obteniendo correlación códigos ALM <--> códigos PiaFacts', }, \					pgBar1: Progressbar { text: '', preferredSize:[350, 10], maxvalue:'" + iter + "' }, \					labelLog: StaticText { text: '', preferredSize:[350,20], }, \					cancel: Button { text:'Cancel', }, \				}, \			 }"		this.wnd = new Window(this.wndResource);		this.wnd.mainPanel.cancel.onClick = this.close;		this.wnd.cancelar = false;		this.wnd.cancelElement = this.wnd.mainPanel.cancel;	}	this.step = function()	{		this.wnd.mainPanel.pgBar1.value = (this.wnd.mainPanel.pgBar1.value + 1);	}	this.show = function() { this.wnd.show(); }	this.close = function() { if (this.hasOwnProperty('wnd')) this.wnd.close(); else this.window.close(); }	this.hide = function() { this.wnd.hide(); }	this.update = function() { this.wnd.hide(); this.show(); }	this.message = function(msg) { this.wnd.mainPanel.labelLog.text = msg; }	this.title = function(tlt) { this.wnd.mainPanel.label1.text = tlt; }	this.reset = function(init) { this.wnd.mainPanel.pgBar1.value = init; }	this.maxvalue = function(iter) { this.wnd.mainPanel.pgBar1.maxvalue = iter; }	this.createProgressBar(iter);			return this;}// ---------------------------------------------------------------------------------------------------------timeDiff.setStartTime();app.doScript(main,    ScriptLanguage.JAVASCRIPT   , null  , UndoModes.ENTIRE_SCRIPT   , 'Cod. Largo <--> Corto');$.writeln("Script execution time: " + timeDiff.getDiff() / 1000 + " seconds");// ---------------------------------------------------------------------------------------------------------/** Busca en todo el documento activo cualquier ocurrencia de un código 	de artículo y lo sustituye por el código equivalente, según el archivo	de códigos suministrado.	*/function main()// ---------------------------------------------------------------------------------------------------------{	if (app.documents.length === 0)	{		alert('No hay ningún documento abierto');		return ;	}	var wrce = 		"""dialog { 			mPanel : Panel { 			  rb1 : RadioButton { text:'Generar códigos CORTOS XXX', value:true, }, 			  rb2 : RadioButton { text:'Generar códigos LARGOS XXX.XXX.XXX', },			},			mButton : Group { 				ok : Button { text:'Aceptar', }, cancel : Button { text:'Cancelar', } 			}, 		}""";		var dlg = new Window(wrce);	dlg.cancelElement = dlg.mButton.cancel;	dlg.defaultElement = dlg.mButton.ok;	dlg.mButton.ok.onClick = function() { dlg.close(true); }	dlg.mButton.cancel.onClick = function() { dlg.close(false); }		if (dlg.show())	{		var searchType = (dlg.mPanel.rb1.value) ? IKEACodeType.IKEACODE_PIAFACTS : IKEACodeType.IKEACODE_ALM;					var code = new IKEACodesInDocument(app.activeDocument, '~/codigos_alm.csv', searchType)		code.run();	}}