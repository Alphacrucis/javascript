/** IKEA Products API    Author: Javier Ramos        Retrieve information about products from an external web API.    */#strict onvar IKEA = (function(){    const IKEA_URL = "http://ibiza.ikea.es/esi/es/catalog/products/";        var null_object = function(obj){        if (!obj) {            return ;        }            for (key in obj){            if (obj[key] === 'null'){                obj[key] = null;            }            else if (obj[key] && obj[key].is(Object) && !obj[key].is(Function)){                null_object(obj[key]);            }        }    };        var eval_safe = function(obj_str){        // Use a more safe eval, that, for example, change al the "null" by actual null values.        var obj = eval(obj_str);        if (obj.is(Array)){            obj = obj.first();        }        null_object(obj);                    return obj;    };    /** _GET :: string -> [{name: ..., value: ...}] -> string                Do a HTML GET request to 'url' with 'params' being an         array of {key:value} parameters to send.        */    var _GET = function (url, params){        var http, response;        var par = '';        if (params.length > 0){            par = '?';            params.forEach(function(param){                 par += param.name + '=' + param.value + '&';            });            par = par.slice(0, -1);        }        http = require("http");        response = http.get(url + par);                if (response.status == 200){            return response.body;        }                    throw new ImportError('Error al conectar con la Base de Datos');    };    /** getProductInfoXML :: product_id -> string                Given a IKEA Product PartNumber        */    var getProductInfoXML = function(product_id){        return _GET(IKEA_URL + product_id,                    [{name:'type', value:'xml'},                    {name:'dataset', value:'prices'}]);    };    /** getProductInfoJSON :: product_id -> string                Given an IKEA product partNumber return json string representing it.        */    var getProductInfoJSON = function(partNumber, island, date){        const data = "type=json&dataset=ptagPOST" +                     "&island=" + (island || IKEA.TENERIFE) +                     "&date=" + (date || '') +                     "&products[]=" + partNumber;                var http = require("http");        var response = http.post(IKEA_URL, data);                if (response.status === 200){            return response.body;        }                    throw new ImportError('Error al conectar con la Base de Datos');    };    var exported = {        ORIGENES: [              { name: 'LANZAROTE',    code: "lanzarote"  },              { name: 'PUERTO RICO',  code: "puertorico" },              { name: 'MALLORCA',     code: "palma"      },              { name: 'GRAN CANARIA', code: "tenerife"   },              { name: 'TENERIFE',     code: "tenerife"   }        ],        // Field name constants         CF_ALMCOD         : "almcod",        CF_AREA           : "area",        CF_ASSEMBLY       : "assembly",        CF_CAREINST       : "careInst",        CF_COLOR          : "color",        CF_CURRENCY       : "currency",        CF_CUSTBENEFIT    : "custBenefit",        CF_CUSTMATERIALS  : "custMaterials",        CF_DATAPRINT      : "dataPrint",        CF_DESIGNER       : "designer",        CF_ENVIRONMENT    : "environment",        CF_FACTS          : "facts",        CF_FORMATNUMBER   : "formatNumber",        CF_GOODTOKNOW     : "goodToKnow",        CF_IMAGE          : "image",        CF_ISLAND         : "island",        CF_ITEMQUANTITY   : "itemquantity",        CF_MEASURE        : "measure",        CF_NAME           : "name",        CF_PACKAGE        : "package",        CF_PARTNUMBER     : "partNumber",        CF_PKGMEAS        : "pkgmeas",        CF_PRICENORMAL    : "priceNormal",        CF_PRICEORIGINAL  : "priceOriginal",        CF_PRICESALE      : "priceSale",        CF_QUANTITY       : "quantity",        CF_SIZE           : "size",        CF_SUBITEMQUANTITY: "subitemQuantity",        CF_SUBITEMS       : "subitems",                         // Field labels        CL_ALMCOD         : "Cod. corto",        CL_AREA           : "Área",        CL_ASSEMBLY       : "Montaje",        CL_CAREINST       : "Cuidados",        CL_COLOR          : "color",        CL_CURRENCY       : "Moneda",        CL_CUSTBENEFIT    : "Información",        CL_CUSTMATERIALS  : "Materiales",        CL_DATAPRINT      : "dataPrint",        CL_DESIGNER       : "Diseñador",        CL_ENVIRONMENT    : "Medio Ambiente",        CL_FACTS          : "Descripción",        CL_FORMATNUMBER   : "Código",        CL_GOODTOKNOW     : "Conviene saber",        CL_IMAGE          : "Imagen",        CL_ISLAND         : "Origen",        CL_ITEMQUANTITY   : "itemquantity",        CL_MEASURE        : "Tamaño",        CL_NAME           : "Artículo",        CL_PACKAGE        : "Empaquetado",        CL_PARTNUMBER     : "Código",        CL_PKGMEAS        : "pkgmeas",        CL_PRICENORMAL    : "Precio",        CL_PRICEORIGINAL  : "Precio Compra",        CL_PRICESALE      : "Precio Venta",        CL_QUANTITY       : "Cantidad",        CL_SIZE           : "Medidas",        CL_SUBITEMQUANTITY: "Número de componentes",        CL_SUBITEMS       : "Componentes",                 // dinamically assigned later (before return) to map CF_... field names to CL_... field labels        labels: {},                RE_LARGECODE: /\d\d\d\.\d\d\d\.\d\d/mg,        /** Cachea el símbolo de monea o devuelve el            último valor cacheado */        cached_price_symbol: undefined,        /** Getter and Setter for the price_symbol */        price_symbol: function(ps) {            if (!!ps) {                this.cached_price_symbol = ps;            } else                return this.cached_price_symbol;        },        /** Return an Product from a json structure */        ProductJSON: function(json_data) {            var product;                        product = eval_safe(json_data);            if (product.is(Array)){                product = product.first();            }            return {                isValid: true,                attributes: product,                /* Return the field value.                    options is an object that can containg the following keys:                        packingArrays:true -> if the field value is an array, join into string                        notrim -> don't trim the result string                */                get: function(field, options) {                     var v;                                        if (!options) options = {};                                        v = this.attributes[field] || "";                                        if (!v){                        return null;                    }                                    if (v.is(Array) && options.has('packingArrays')) {                        v = v.join(' ');                    }                    if (v.has('trim') && !options.has('notrim')){                        v = v.trim();                    }                                     return v;                },                            set: function(field, value) { this.attributes[field] = value; return this; },                                toString: function() { return pinfo[0]; },                                /* Return an object with the default fields and values, plus any extra field especified */                defaultFields: function(extraFields){                    var self = this;                    var res = {                             name   : self.get(IKEA.CF_NAME),                            description: self.get(IKEA.CF_FACTS),                            price  : self.get(IKEA.CF_PRICENORMAL),                            info   : self.get(IKEA.CF_CUSTBENEFIT),                            size   : self.get(IKEA.CF_SIZE),                            color  : self.get(IKEA.CF_COLOR),                            code   : self.get(IKEA.CF_FORMATNUMBER),                            altcode: self.get(IKEA.CF_ALMCOD)                    };                                    if (!extraFields) {                        extraFields = []                    } else if (!extraFields.is(Array)) {                        extraFields = [extraFields];                    }                    extraFields.forEach(function(field) {                        res[field] = self.get(field);                    });                                    return res;                },                            format: function(args) {                    var r;                                        if (!args) { args = {}; }                    if (!args.sep) { args.sep = '|'; }                    if (!args.fields){                        r = this.defaultFields();                    }else{                        var self = this;                        r = {};                        this.attributes.keys().forEach(function(k){                            if (args.fields.contains(k)){                                r[k] = self.attributes[k];                            }                        });                    }                                        return r.values().compact().join(args.sep).trim();                },                            fields: function( field_names ){                    if (!field_names){                        return this.defaultFields();                    }                                        var res = {};                                        var self = this;                    field_names.keys().forEach(function(field){                        res[field] = self.get(field);                    });                                    return res;                }            };        },        /** Return an Product from a the partNumber, getting the json data from the web API */        Product: function(partNumber, island, date){            var pinfo, pn, product;            pn = IKEA.partNumber(partNumber);            pinfo = getProductInfoJSON(pn, island, date);                        if (!pinfo || pinfo === "[]") {                throw new ValidationError('No se han encontrado datos para la referencia ' + partNumber);            }                        return IKEA.ProductJSON(pinfo);        },            /* Convert the argument to a number if is a valid partNumber, otherwise throw an type error */        partNumber: function(pn) {            var res = pn;            if (typeof res === 'string') {                 res = Number(res.replace(/\./, ''));            }             if (typeof res === 'number' && !isNaN(res)) {                return res;            }                        throw new TypeError('ERROR: "' + pn + '" no es un código de articulo válido');        },            /* Return the right data source for the argument */        getSource: function(source) {            for (var i=0,e=IKEA.ORIGENES.length; i<e; ++i) {                if (IKEA.ORIGENES[i]['name'] === source) {                    return IKEA.ORIGENES[i]['code'];                }            }                    throw new ValidationError('No se ha indicado el origen de los datos de artículo');        },    };    // Assigned dinamically to easy use of field labels    exported.labels[exported.CF_ALMCOD]          = exported.CL_ALMCOD;    exported.labels[exported.CF_AREA]            = exported.CL_AREA;    exported.labels[exported.CF_ASSEMBLY]        = exported.CL_ASSEMBLY;    exported.labels[exported.CF_CAREINST]        = exported.CL_CAREINST;    exported.labels[exported.CF_COLOR]           = exported.CL_COLOR;    exported.labels[exported.CF_CURRENCY]        = exported.CL_CURRENCY;    exported.labels[exported.CF_CUSTBENEFIT]     = exported.CL_CUSTBENEFIT;    exported.labels[exported.CF_CUSTMATERIALS]   = exported.CL_CUSTMATERIALS;    exported.labels[exported.CF_DATAPRINT]       = exported.CL_DATAPRINT;    exported.labels[exported.CF_DESIGNER]        = exported.CL_DESIGNER;    exported.labels[exported.CF_ENVIRONMENT]     = exported.CL_ENVIRONMENT;    exported.labels[exported.CF_FACTS]           = exported.CL_FACTS;    exported.labels[exported.CF_FORMATNUMBER]    = exported.CL_FORMATNUMBER;    exported.labels[exported.CF_GOODTOKNOW]      = exported.CL_GOODTOKNOW;    exported.labels[exported.CF_IMAGE]           = exported.CL_IMAGE;    exported.labels[exported.CF_ISLAND]          = exported.CL_ISLAND;    exported.labels[exported.CF_ITEMQUANTITY]    = exported.CL_ITEMQUANTITY;    exported.labels[exported.CF_MEASURE]         = exported.CL_MEASURE;    exported.labels[exported.CF_NAME]            = exported.CL_NAME;    exported.labels[exported.CF_PACKAGE]         = exported.CL_PACKAGE;    exported.labels[exported.CF_PARTNUMBER]      = exported.CL_PARTNUMBER;    exported.labels[exported.CF_PKGMEAS]         = exported.CL_PKGMEAS;    exported.labels[exported.CF_PRICENORMAL]     = exported.CL_PRICENORMAL;    exported.labels[exported.CF_PRICEORIGINAL]   = exported.CL_PRICEORIGINAL;    exported.labels[exported.CF_PRICESALE]       = exported.CL_PRICESALE;    exported.labels[exported.CF_QUANTITY]        = exported.CL_QUANTITY;    exported.labels[exported.CF_SIZE]            = exported.CL_SIZE;    exported.labels[exported.CF_SUBITEMQUANTITY] = exported.CL_SUBITEMQUANTITY;    exported.labels[exported.CF_SUBITEMS]        = exported.CL_SUBITEMS;        return exported;})();