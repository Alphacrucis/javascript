/** Extends the extendable UI interface    Author: Javier Ramos    */function centerRelativeTo(window, width, height) {    /** Return an array with the Bounds of a window of         size (width, height) center in the bound suministrate.        Be careful, Indesign window bounds are [y0,x0,y1,x1]        while ScriptUI bounds are [x0, y0, x1, y1]    */    var swap = function(b) { return { x0:b[1], y0:b[0], x1:b[3], y1:b[2] }; } // fix the reversed coord.    var wb =  swap(window.bounds);     var y0 = (wb.y1 + wb.y0 - height) / 2;    var x0 = (wb.x1 + wb.x0 - width) / 2    return [x0, y0, x0+width, y0+height];}/** extends UI */function ext_UI(wndObj) {    wndObj.constructor.prototype.find = function(name) {        var key,fnd;                if (this.has(name))            return this[name];                    for (key in this) {            if (key != 'prototype' && this[key].has('find')) {                fnd = this[key].find(name);                if (fnd) { return fnd; }            }        }            return false;    }    // add control [multiline input + /optional/ label]    wndObj.constructor.prototype.input_multi = function(label, name, text) {         if (label != undefined) {            this.text('lb' + label, label);        }        this.add_control(name, 'edittext', text, { 'multiline':true } );                return this;    };    // add control [label + input]    wndObj.constructor.prototype.input_labeled = function(label, name, text) {         return this.text('lb_' + name, label)                   .input(name, text);        return this;    };    // add control tabbedPanel    wndObj.constructor.prototype.tabbedPanel = function(tabLabels, callback) {         var tab = this.row('tabRow');                tab.spacing = 0;        tab.margin = 0;        tab.alignChildren = 'left';        var get_tab = function(index) {            if (tab.has('tab_'+index)) {                return tab['tab_' + index];            }        };            for (var i=0; i<tabLabels.length; ++i) {            tab.button('tab_' + i, tabLabels[i]);            var b = get_tab(i);            b.spacing = 0;            b.preferredSize = [120, 24];            b.onDraw = function(){                var gx = this.graphics;                gx.drawOSControl();                if (this.text === tab.activeTabText)                    gx.drawFocusRing(0, 0, this.size[0], this.size[1]);            };                    b.on('click').do(function(){                tab.activeTabText = this.text;                callback(this.text);                this.parent.window.layout.layout(1);            });        };            tab.activeTabText = get_tab(0).text;        return this;    };    wndObj.constructor.prototype.show = function() { this.window.show(); }    return wndObj;}