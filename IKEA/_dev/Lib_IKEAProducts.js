#target "indesign"#strict on#include "~/_scripts/frameworks/Extendables/extendables.jsx"var IKEA = function(){    return {        _debug: function (str) {}, // { $.writeln(str); },        /** _GET :: string -> [{name: ..., value: ...}] -> string            */        _GET: function (url, params){            var http;            var response;            var url_ = url;                        if (params){                params.forEach(function(param){                     url_ = url_.replace(param.name, param.value);                 });            }            _debug(url_);                        http = require("http");            response = http.get(url_);                        return response.body;        },        /** getProductInfoXML :: product_id -> XML String            */        getProductInfoXML: function(product_id){            var IKEA_URL = "http://ibiza.ikea.es/esi/es/catalog/products/$PRODUCT_ID$?type=xml&dataset=prices";            var url = IKEA_URL.replace();            return _GET(IKEA_URL, [{name:'$PRODUCT_ID$', value:product_id}]);        },        /** getProductInfoJSON :: product_id -> JSON String            */        getProductInfoJSON: function(partNumber, island, date){            var url = "http://ibiza.ikea.es/esi/es/catalog/products/";            var data = "type=json&dataset=ptagPOST"                      + "&island=" + island                     + "&date=" + date                     + "&products[]=" + partNumber;                        var http = require("http");            var response = http.post(url, data);                        return response.body;        },        /** getProductInfo :: product_id -> (Object, JSON String)                        Given an IKEA product partNumber return a pair with a            json string a the object represented by the string.                */        getProductInfo: function(partNumber, island, date){            var productString = IKEA.getProductInfoJSON(partNumber, island, date);            var ProductInfo   = eval(productString);            return [productString, ProductInfo];        },            prettyPrintJSON: function(json_string) {            const keypairs = '[]{}""'            const keyreplace = { '“':'"', '”': '"', '\/':'/' };            var s;            s = json_string.replace('“', '"').replace('”', '"');            s = s.split(',').join(',\n');                                    return s;        },        IKEAProduct: function(partNumber, island, date){            var pinfo = IKEA.getProductInfo(partNumber, island, date);            this.product = eval(pinfo[1])[0];            for (key in this.product){                this.product[key] = unescape(this.product[key]);            }                        this.toString = function() { return pinfo[0]; };                        this.getImageCURL = function(){                if (File.fs == "Macintosh") {                    var script = 'do shell script "/usr/bin/curl {} > /tmp/image.jpg"'.format(this.product.image);                    var result = app.doScript(script, ScriptLanguage.APPLESCRIPT_LANGUAGE);                    //TODO: load the image in the object                } else {//                    var body =  'dim objShell\rset objShell = CreateObject("Shell.Application")\rstr = "{}"\robjShell.ShellExecute str, "", "", "open", 1 '.format(this.location);//                    app.doScript(body,ScriptLanguage.VISUAL_BASIC);                }	            }            return this;        }    }}();var Product = new IKEA.IKEAProduct("10196431", "puertorico");var tf = app.activeDocument.pages[0].textFrames.add({geometricBounds:[0,0,"297mm","210mm"]});tf.contents = Product.toString();