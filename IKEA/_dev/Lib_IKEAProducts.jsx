/** IKEA Products API    Author: Javier Ramos        Dependencies: extentables        Retrieve information about products from an external web API.    */#target "indesign"#strict on#include "~/_scripts/frameworks/Extendables/extendables.jsx"//var IKEA = IKEA || (function(){var IKEA = (function(){    const IKEA_URL = "http://ibiza.ikea.es/esi/es/catalog/products/";        var nullify = function(v){         return !v || v === 'null';     };        var build_error = function(ErrorType, message){        var res = new ErrorType();        res.message = message;        return res;    };    var null_object = function(obj){        for (key in obj){            if (obj[key] === 'null'){                obj[key] = null;            }            else if (obj[key] && obj[key].is(Object) && !obj[key].is(Function)){                null_object(obj[key]);            }        }    };        var eval_safe = function(obj_str){        // Use a more safe eval, that, for example, change al the "null" by actual null values.        var obj = eval(obj_str);        if (obj.is(Array)){            obj = obj.first();        }        null_object(obj);                    return obj;    };    /** _GET :: string -> [{name: ..., value: ...}] -> string                Do a HTML GET request to 'url' with 'params' being an         array of {key:value} parameters to send.        */    var _GET = function (url, params){        var http, response;        var par = '';        if (!nullify(params)){            par = '?';            params.forEach(function(param){                 par += param.name + '=' + param.value + '&';            });            par = par.slice(0, -1);        }        http = require("http");        response = http.get(url + par);                if (response.status == 200){            return response.body;        }                    throw new ImportError('Error al conectar con la Base de Datos');    };    /** getProductInfoXML :: product_id -> string                Given a IKEA Product PartNumber        */    var getProductInfoXML = function(product_id){        return _GET(IKEA_URL + product_id,                    [{name:'type', value:'xml'},                    {name:'dataset', value:'prices'}]);    };    /** getProductInfoJSON :: product_id -> string                Given an IKEA product partNumber return json string representing it.        */    var getProductInfoJSON = function(partNumber, island, date){        const data = "type=json&dataset=ptagPOST" +                     "&island=" + (island || IKEA.TENERIFE) +                     "&date=" + (date || '') +                     "&products[]=" + partNumber;                var http = require("http");        var response = http.post(IKEA_URL, data);                if (response.status === 200){            return response.body;        }                    throw build_error(ImportError, 'Error al conectar con la Base de Datos');    };    var KEYS = ["lanzarote","puertorico","palma","tenerife"];       var exported = {        LANZAROTE: KEYS[0],        PUERTO_RICO: KEYS[1],        PALMA: KEYS[2],        TENERIFE: KEYS[3],        ORIGENES: [              { name: 'LANZAROTE',    code: this.LANZAROTE },              { name: 'PUERTO RICO',  code: this.PUERTO_RICO },              { name: 'MALLORCA',     code: this.PALMA },              { name: 'GRAN CANARIA', code: this.TENERIFE },              { name: 'TENERIFE',     code: this.TENERIFE }        ],        // Field name constants         CF_ALMCOD         : "almcod",        CF_AREA           : "area",        CF_ASSEMBLY       : "assembly",        CF_CAREINST       : "careInst",        CF_COLOR          : "color",        CF_CURRENCY       : "currency",        CF_CUSTBENEFIT    : "custBenefit",        CF_CUSTMATERIALS  : "custMaterials",        CF_DATAPRINT      : "dataPrint",        CF_DESIGNER       : "designer",        CF_ENVIRONMENT    : "environment",        CF_FACTS          : "facts",        CF_FORMATNUMBER   : "formatNumber",        CF_GOODTOKNOW     : "goodToKnow",        CF_IMAGE          : "image",        CF_ISLAND         : "island",        CF_ITEMQUANTITY   : "itemquantity",        CF_MEASURE        : "measure",        CF_NAME           : "name",        CF_PACKAGE        : "package",        CF_PARTNUMBER     : "partNumber",        CF_PKGMEAS        : "pkgmeas",        CF_PRICENORMAL    : "priceNormal",        CF_PRICEORIGINAL  : "priceOriginal",        CF_PRICESALE      : "priceSale",        CF_QUANTITY       : "quantity",        CF_SIZE           : "size",        CF_SUBITEMQUANTITY: "subitemQuantity",        CF_SUBITEMS       : "subitems",                         // Field labels        CL_ALMCOD         : "Cod. corto",        CL_AREA           : "Área",        CL_ASSEMBLY       : "Montaje",        CL_CAREINST       : "Cuidados",        CL_COLOR          : "color",        CL_CURRENCY       : "Moneda",        CL_CUSTBENEFIT    : "Información",        CL_CUSTMATERIALS  : "Materiales",        CL_DATAPRINT      : "dataPrint",        CL_DESIGNER       : "Diseñador",        CL_ENVIRONMENT    : "Medio Ambiente",        CL_FACTS          : "Descripción",        CL_FORMATNUMBER   : "Código",        CL_GOODTOKNOW     : "Conviene saber",        CL_IMAGE          : "Imagen",        CL_ISLAND         : "Origen",        CL_ITEMQUANTITY   : "itemquantity",        CL_MEASURE        : "Tamaño",        CL_NAME           : "Artículo",        CL_PACKAGE        : "Empaquetado",        CL_PARTNUMBER     : "Código",        CL_PKGMEAS        : "pkgmeas",        CL_PRICENORMAL    : "Precio",        CL_PRICEORIGINAL  : "Precio Compra",        CL_PRICESALE      : "Precio Venta",        CL_QUANTITY       : "Cantidad",        CL_SIZE           : "Medidas",        CL_SUBITEMQUANTITY: "Número de componentes",        CL_SUBITEMS       : "Componentes",                 field_alias: {             description: this.CF_FACTS,             price: this.CF_PRICENORMAL,             large_code: this.CF_FORMATNUMBER,             sort_code: this.CF_ALMCOD        },            labels: {}, // dinamically assigned later (before return) to map CF_... field names to CL_... field labels                RE_LARGECODE: /\d\d\d\.\d\d\d\.\d\d/mg,        /** Cachea el símbolo de monea o devuelve el            último valor cacheado */        cached_price_symbol: undefined,        price_symbol: function(ps) {            if (!!ps) {                this.cached_price_symbol = ps;            } else                return this.cached_price_symbol;        },        /** Return an Product from a json structure */        ProductJSON: function(json_data) {            var product;                        product = eval_safe(json_data);            if (product.is(Array)){                product = product.first();            }            return {                attributes: product,                get: function(field, cutText) {                     var v;                    // maps field names with alias                    if (IKEA.field_alias[field]){                        field = IKEA.field_alias[field];                    }                                            v = this.attributes[field] || "";                    if (nullify(v)){                        return null;                    }                                            // remove duplicate substring                    if (cutText && v.indexOf(cutText) >= 0){                        return v.replace(cutText, '').trim().replace(/,$/,'');                     }                                    if (v.has('trim')){                        v = v.trim();                    }                     if (v.is(Array)) {                        v = v.join('. ');                    }                                    return v;                },                            set: function(field, value) { this.attributes[field] = value; return this; },                                toString: function() { return pinfo[0]; },                                defaultFields: function(){                    return { name: this.get(CF_NAME),                             description: this.get(CF_FACTS, this.get('color')),                             price: this.get(CF_PRICENORMAL),                             size: this.get(CF_SIZE),                             color: this.get(CF_COLOR),                             large_code: this.get(CF_FORMATNUMBER),                             sort_code: this.get(CF_ALMCOD)                           };                                    },                            format: function(args) {                    var r;                                        if (!args) { args = {}; }                    if (!args.sep) { args.sep = '|'; }                    if (!args.fields){                        r = this.defaultFields();                    }else{                        var self = this;                        r = {};                        this.attributes.keys().forEach(function(k){                            if (args.fields.contains(k)){                                r[k] = self.attributes[k];                            }                        });                    }                                        return r.values().compact().join(args.sep).trim();                },                            fields: function( field_names ){                    if (!field_names){                        return this.defaultFields();                    }                                        var res = {};                                        var self = this;                    field_names.forEach(function(field){                        res[field] = self.get(field);                    });                                    return res;                }            };        },        /** Return an Product from a the partNumber, getting the json data from the web API */        Product: function(partNumber, island, date){            var self = this;            var pinfo, pn, product;            // remove points in partNumber XXX.XXX.XX to XXXXXXXX            pn = Number(partNumber.replace(/\./g, ''));                        pinfo = getProductInfoJSON(pn, island, date);                        if (nullify(pinfo)) {                throw build_error(ValidationError,                         'No se han encontrado datos para la referencia "{}".'.format(partNumber));            }                        $.writeln(pinfo);            return IKEA.ProductJSON(pinfo);        },        xmlRoot: function(doc){            return (!doc) ? app.activeDocument.xmlElements.item(0) :                            doc.xmlElements.item(0);        },                addXMLElement: function(root, name, attrs, dest) {            if (root === undefined || root === null){                root = this.xmlRoot(); // document root            } else if (!root.is(XMLElement)) {                build_error(ImportError, 'Elemento XML no válido como raíz');            }                    var element = root.xmlElements.add(name, dest);            for(name in attrs) {                if (attrs[name] && attrs[name].is(String)){                    var inner = element.xmlElements.add(name);                    inner.contents = attrs[name] + ' ';                }            }                    return element;        },            removeXMLElementsByAttr: function(attr, value){            var rootElem = app.activeDocument.xmlElements.item(0);            var leaf = rootElem.children().filter(function(el){                     return (el.xmlAttributes.everyItem().value).contains(value);                });            leaf.forEach(function(el) { el.remove(); });        },            stringifyObject: function(obj, sep) {            var serialize = [];            for (key in obj) {                if (!obj[key].is(Function)){                    serialize.push(obj[key]);                }            }            return serialize.join(sep);        },            productToXML: function(product, doc, dest){            var code, data, elem, attr;                        if (!doc) {                doc = app.activeDocument;            }                        code = product.get('partNumber');                        IKEA.removeXMLElementsByAttr('partNumber', code);                        // insert new xmlElement in document root            data = product.fields(['name', 'description', 'price', 'custMaterials', 'size', 'color', 'large_code']);            data.custMaterials = this.stringifyObject(data.custMaterials, '');            elem = IKEA.addXMLElement(IKEA.xmlRoot(doc), "Article", data, dest);            elem.xmlAttributes.add('partNumber', code);            elem.xmlAttributes.add('timeStamp', Date(Date.now()));                        return elem;        },               getTextFrame: function(sel){            if (!sel) {                return undefined;            } else if (sel.is(TextFrame)){                return sel;            }            else if (sel.is(InsertionPoint) || sel.has_own('parentTextFrames')){                return sel.parentTextFrames[0];            }                            throw build_error(ValidationError, "El objeto no contiene texto.");        }    };    // Assigned dinamically to easy use of field labels    exported.labels[exported.CF_ALMCOD]          = exported.CL_ALMCOD;    exported.labels[exported.CF_AREA]            = exported.CL_AREA;    exported.labels[exported.CF_ASSEMBLY]        = exported.CL_ASSEMBLY;    exported.labels[exported.CF_CAREINST]        = exported.CL_CAREINST;    exported.labels[exported.CF_COLOR]           = exported.CL_COLOR;    exported.labels[exported.CF_CURRENCY]        = exported.CL_CURRENCY;    exported.labels[exported.CF_CUSTBENEFIT]     = exported.CL_CUSTBENEFIT;    exported.labels[exported.CF_CUSTMATERIALS]   = exported.CL_CUSTMATERIALS;    exported.labels[exported.CF_DATAPRINT]       = exported.CL_DATAPRINT;    exported.labels[exported.CF_DESIGNER]        = exported.CL_DESIGNER;    exported.labels[exported.CF_ENVIRONMENT]     = exported.CL_ENVIRONMENT;    exported.labels[exported.CF_FACTS]           = exported.CL_FACTS;    exported.labels[exported.CF_FORMATNUMBER]    = exported.CL_FORMATNUMBER;    exported.labels[exported.CF_GOODTOKNOW]      = exported.CL_GOODTOKNOW;    exported.labels[exported.CF_IMAGE]           = exported.CL_IMAGE;    exported.labels[exported.CF_ISLAND]          = exported.CL_ISLAND;    exported.labels[exported.CF_ITEMQUANTITY]    = exported.CL_ITEMQUANTITY;    exported.labels[exported.CF_MEASURE]         = exported.CL_MEASURE;    exported.labels[exported.CF_NAME]            = exported.CL_NAME;    exported.labels[exported.CF_PACKAGE]         = exported.CL_PACKAGE;    exported.labels[exported.CF_PARTNUMBER]      = exported.CL_PARTNUMBER;    exported.labels[exported.CF_PKGMEAS]         = exported.CL_PKGMEAS;    exported.labels[exported.CF_PRICENORMAL]     = exported.CL_PRICENORMAL;    exported.labels[exported.CF_PRICEORIGINAL]   = exported.CL_PRICEORIGINAL;    exported.labels[exported.CF_PRICESALE]       = exported.CL_PRICESALE;    exported.labels[exported.CF_QUANTITY]        = exported.CL_QUANTITY;    exported.labels[exported.CF_SIZE]            = exported.CL_SIZE;    exported.labels[exported.CF_SUBITEMQUANTITY] = exported.CL_SUBITEMQUANTITY;    exported.labels[exported.CF_SUBITEMS]        = exported.CL_SUBITEMS;        return exported;})();