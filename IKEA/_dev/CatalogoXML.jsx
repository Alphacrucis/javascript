/** IKEA Catalogo XML    Author: Javier Ramos        Dependencies: extentables, Lib_IKEAProducts, Lib_IKEA_Styles, indesign    */#target "indesign"#targetengine "medianis"#strict on#include "~/_scripts/frameworks/Extendables/extendables.jsx"#include "~/_scripts/lib/indesign.jsx"#include "lib/IKEAProducts.jsx"#include "lib/IKEAStyles.jsx"#include "lib/IKEAProduct_UI.jsx"#include "lib/IKEA_XML.jsx"var ui = require("ui");// * --------------------------------------------------------------------------------------------------------var throwE = function(ErrorType, message, throwing) {    if (throwing) {        var res = new ErrorType();        res.message = message;        throw res;    } else {        alert('ERROR: ' + message);    }}function main() {    // current document sanity checks	IKEA.Styles.createDefaultStyles();    ui_();}// * --------------------------------------------------------------------------------------------------------function ui_() {    var mixins = {        'inputLine': { 'size': [120, 24], },        'button': [ 'inputLine' ],        'left': { 'alignChildren':'left' }    };    var WINDOW_NAME = 'XMLCatalogo';    var dialog = new ui.Palette('Insertar Producto').with(mixins);        origins = IKEA.ORIGENES.pluck('name');    orcodes = IKEA.ORIGENES.pluck('code');        dialog.window.location = [52,125];    dialog.window.name = WINDOW_NAME;    dialog.column('pinput')          .dropdown('origin', origins).using('inputLine')          .text('label1', 'Código de producto')          .input('partNumber').using('inputLine')          .button('view', 'Ver').using('button')          .button('insert', 'Insertar').using('button');        var getOrigin = function() {        var fromOrigin = dialog.pinput.origin.selection;        if (!fromOrigin){            throwE(ValidationError, 'No se ha especificado un origen');        }        return orcodes[origins.indexOf(fromOrigin.toString())];    };        var getPartNumber = function(code) {        if (code.has('replace')) {            code = code.replace(/\./g, '');        }        if (code.has('trim')) {            code = code.trim();        }        if (!!Number(code)) {            return code;        }        throwE(ValidationError, 'El código de producto no es válido.');    };    /* event handlers */       dialog.pinput.view.on('click').do(function() {        var partNumber = getPartNumber(dialog.pinput.partNumber.text);        if (partNumber) {            IKEA.UI.show_product(new IKEA.Product(partNumber, getOrigin()));        }    });    dialog.pinput.insert.on('click').do(function () {        var tframe = resolveTextFrame(app.selection[0]);        if (tframe){            var partNumber = getPartNumber(dialog.pinput.partNumber.text);            var product = new IKEA.Product(partNumber, getOrigin());            try {                if (tframe.paragraphs.lastItem().isValid)                     IKEA.XML.productToXML(product, tframe.paragraphs.lastItem().insertionPoints.lastItem());                else                    IKEA.XML.productToXML(product, tframe);            } catch(e) {                alert(e);            }            IKEA.price_symbol('€');            IKEA.Styles.apply(tframe);            // process_codes(partNumber, tframe, 'tenerife');        } else { alert('Ha de selecionar una caja de texto'); }    });    dialog.window.onClose = function() {    };    dialog.window.show();}function ui_mainForm(){    var mixins, dialog, origins, orcodes, fields;    var docname, container ,pn;    const WINDOW_NAME = 'XMLCatalogo';        mixins = {        'inputLine': { 'size': [120, 24], },        'button': [ 'inputLine' ],        'left': { 'alignChildren':'left' }    };    origins = IKEA.ORIGENES.pluck('name');    orcodes = IKEA.ORIGENES.pluck('code');    /* structure */    dialog = new ui.Palette('Insertar Producto').with(mixins);    dialog.window.location = [52,125];    dialog.window.name = WINDOW_NAME;    dialog.column('pinput')          .dropdown('origin', origins).using('inputLine')          .text('label1', 'Código de producto')          .input('partNumber').using('inputLine')          .button('view', 'Ver').using('button')          .button('insert', 'Insertar').using('button')          .button('update', 'Actualizar Todo').using('button');    dialog.pinput.insert.helpTip = 'Insertar el artículo de código indicado en el contenedor seleccionado';    dialog.pinput.update.helpTip = 'Actualizar todos los contenedores con un código de producto.';    // try to infer the origin from the active document name    if (app.documents.length > 0){        docname = app.activeDocument.name;        if (docname.toLowerCase().indexOf('canarias') >= 0){            dialog.pinput.origin.selection = dialog.pinput.origin.items[4];        } else if (docname.toLowerCase().indexOf('lanzarote') >= 0){            dialog.pinput.origin.selection = dialog.pinput.origin.items[0];        }    }    var getOrigin = function() {        var fromOrigin = dialog.pinput.origin.selection;        if (!fromOrigin){            throwE(ValidationError, 'No se ha especificado un origen');        }        $.writeln(orcodes[origins.indexOf(fromOrigin.toString())]);        return orcodes[origins.indexOf(fromOrigin.toString())];    };    /* event handlers */       dialog.pinput.view.on('click').do(function() {        var partNumber = dialog.pinput.partNumber.text.trim();        if (partNumber) {            IKEA.UI.show_product(new IKEA.Product(partNumber, getOrigin()));        }    });    dialog.pinput.insert.on('click').do(function () {        var tframe = resolveTextFrame(app.selection[0]);        var partNumber;        if (tframe){            partNumber = dialog.pinput.partNumber.text.trim();            process_codes(partNumber, tframe, getOrigin());/*            var fun = function() { process_codes(partNumber, tframe, getOrigin()); };                        app.doScript(fun, ScriptLanguage.JAVASCRIPT, null, UndoModes.ENTIRE_SCRIPT, partNumber);            */        } else { alert('Ha de selecionar una caja de texto'); }    });    dialog.pinput.update.on('click').do(function () {        process_all_textframes(app.activeDocument, getOrigin());    });    dialog.window.onClose = function() {        IKEA = null;        $.gc(); $.gc();    };    dialog.window.show();}// * --------------------------------------------------------------------------------------------------------function insertProduct(tframe, partNumber, origin) {    var product, elem, dst, nparag;    var doc = tframe ? document(tframe) : app.activeDocument;    try {        product = new IKEA.Product(partNumber, origin);                if (!product){            return ;        }            IKEA.price_symbol(product.get('currency'));            nparag = tframe.paragraphs.length        dst =  nparag > 0 ? tframe.paragraphs.item(nparag-1) : tframe;        elem = IKEA.XML.productToXML(product, dst);    }    catch(e) {         if (elem) elem.remove()        throw e    }}function process_codes(codes, tframe, origin){    app.scriptPreferences.enableRedraw = false;        tframe = resolveTextFrame(tframe ? tframe : app.selection.first());    first = true;            if (!codes.is(Array)){        codes = [codes];    }    if (tframe.associatedXMLElement){        // TODO: if the textframe already contains xml labels        //       use update mode        alert("Este textframe ya está etiquetado");        return ;    }    // We loose all previous contents    tframe.contents = '';    codes.forEach(function(partNumber){        try {            insertProduct(tframe, partNumber, origin);        } catch(e) {            app.scriptPreferences.enableRedraw = true;            throw e;        }    });        IKEA.Styles.applyStyles(tframe.associatedXMLElement)        app.scriptPreferences.enableRedraw = true;    tframe.contents;}// * --------------------------------------------------------------------------------------------------------function pbar(title, message, max) {    var wnd = new Window('palette', title);    wnd.message = wnd.add('statictext', undefined, message);    wnd.message.preferredSize = [300, 30];    wnd.pgBar = wnd.add('progressbar');    wnd.pgBar.preferredSize = [300, 30];    wnd.pgBar.maxvalue = max;        wnd.pgBar.step = function(msg) {        var f = false;        if (!app.scriptPreferences.enableRedraw)            { app.scriptPreferences.enableRedraw = true; f = true; }                    this.value++;        if (msg) this.window.message.text = msg;        wnd.hide(); wnd.show();                if (f) app.scriptPreferences.enableRedraw = false;	}            return wnd;}// * --------------------------------------------------------------------------------------------------------function process_all_textframes(doc, origin){    app.scriptPreferences.enableRedraw = false;        var tframes = doc.allPageItems.filter(function(tf){ return tf.is(TextFrame); });    var pb = pbar("Importación de datos", "Generando Artículos", tframes.length);        pb.show();        try {        tframes.forEach(function(tf){            var re = tf.contents.toString().match(IKEA.RE_LARGECODE);            pb.pgBar.step(re ? re.toString() : tf.id);            if (re){                process_codes(re, tf, origin);            }        });    }    catch(e) {         $.writeln(e);         app.scriptPreferences.enableRedraw = true;         throw e;     }    finally {        app.scriptPreferences.enableRedraw = true;        pb.close();    }}document(app.activeDocument.selection[0]);app.doScript(main,              ScriptLanguage.JAVASCRIPT,              null,              UndoModes.ENTIRE_SCRIPT,              'XML Tag');