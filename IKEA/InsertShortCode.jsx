#target indesign/** CodeSwift Object		Change every large_code in the document for the pair (large_code, sort_code), 	appliying character styles to the sort_code.	*/function CodeShift(doc, cachedFile){		if (doc == undefined || doc == null)		doc = app.activeDocument;			this.carStyle = 'AlmCOD';			this.document = doc;		if (this.document == undefined)		throw "No se ha indicado un documento válido";		this.codes = new Array();	this.sort  = new Object();	this.error = new Array();		// if AlmCOD style not in document, create 	if (doc.characterStyles.itemByName(this.carStyle) == null)	{		doc.characterStyles.add({name:'AlmCOD'});		alert('Atención, el estilo de carácter AlmCOD no existe. Se creará uno básico.');		this.error.push('El estilo de carácter "AlmCOD" no existía. Se creó uno básico.');	}		if (File(cachedFile).exists)	{		var f = new File(cachedFile);		f.open('r');				while (!f.eof)		{			var cache = f.readln().split(',');			// if not in format 'XXX.XXX.XX' add periods			if (cache[1].indexOf('.') < 0)				cache[1] = cache[1].slice(0, -5) + '.' + 						   cache[1].slice(-5, -2) + '.' +						   cache[1].slice(-2);						this.sort[cache[1]] = cache[0];		}			f.close();	}	this.cachedFile = new File(cachedFile);		return this;}CodeShift.prototype.script_bash = function(large_code){	var script = 'do shell script "/usr/bin/curl -d \'cod_corto=&cod_largo=' +				large_code + 				'&campo=almcod&orden=asc&pag=1&ruta_base=codarticulos/\' ' +				'http://zona.ikeasi.com/codarticulos/resultado.php"';				var result = app.doScript(script, ScriptLanguage.APPLESCRIPT_LANGUAGE);	try {		result = result.split('<tr class="linea_color2"><td>')[1];		result = result.split('</td><td>');		return new Array(result[0], result[1], result[2]);			} catch(e) {		this.error.push(large_code + '\tCódigo corto no disponible en web.');	}	return '';}// Return the sort_code (aka alm_code) associated to the large_code suministratedCodeShift.prototype.getAlmCodes = function(large_code){	// web page query expect large_code without periods	large_code = large_code.split('.').join('');		var code = this.script_bash(large_code);		if (large_code == code[1])		return code[0]; // sort code		return '';}CodeShift.prototype.appendSortCode = function(large_code, sort_code){	app.findTextPreferences.findWhat = large_code;	var textRanges = app.findText();	for (var i=0; i<textRanges.length; ++i)	{		try		{                           var ip = textRanges[i].insertionPoints[textRanges[i].contents.length];            var ip_parent = (ip.parent == '[object Cell]') ? ip.parent.characters : ip.parent;            var p = (ip.index >= ip_parent.length) ? ip.index-1 : ip.index;            var ch = ip.parent.characters[p];            // append only if no other CodAlm is inserted            if (ch.contents != SpecialCharacters.NONBREAKING_SPACE)            {                ip.appliedCharacterStyle = 'AlmCOD';                ip.contents = SpecialCharacters.NONBREAKING_SPACE;                ip.contents += sort_code;                ip.parent.recompose();            }                    if (ip.parent.overflows)                this.error.push(large_code + '\tTexto desbordado.'); 		} catch(e) { 			this.error.push(large_code + '\t' + e.message); 		}	}}CodeShift.prototype.makeCache = function(){	this.cachedFile.open("w");	for (var i=0; i<this.codes.length; ++i)		this.cachedFile.writeln(this.sort[this.codes[i]] + ',' + this.codes[i]);			this.cachedFile.close();}CodeShift.prototype.errorInform = function(){	var wndResource =		"dialog \		 { \			orientation:'column', \			text: 'INFORMACIÓN DE ERRORES', \			mainPanel: Panel \			{ \				label1: StaticText { text:'Listado de errores encontrados.', }, \				listbox1: ListBox { preferredSize:[350, 200], }, \			}, \			bPanel: Group \			{ \				open:  Button { text:'Abrir como texto', }, \				close: Button { text:'Close', }, \			} \		 }"	var dlg = new Window(wndResource);	dlg.error = this.error;		dlg.bPanel.close.onClick = function() { dlg.close(); }	dlg.bPanel.open.onClick = function() 	{		var i=1;				while (File('~/tmp_codalm_errors_' + i + '.txt').exists) 			++i;				var f = new File('~/tmp_codalm_errors_' + i + '.txt');		f.open("w");		for (var i=0; i<this.window.error.length; ++i)			f.writeln(this.window.error[i]);					f.close();		f.execute();				dlg.close(); 	}			for (var i=0; i<this.error.length; ++i)		dlg.mainPanel.listbox1.add('item', this.error[i]);	dlg.show();}CodeShift.prototype.processCodes = function() /** Search the large_codes in the document, and append the	sort_code associated (via web page)	*/{	// search al large_codes	app.findGrepPreferences.findWhat = '\\d{3}\\.\\d{3}\\.\\d{2}';	var words = this.document.findGrep();		// create and show the progressBar	var pb = new JSProgressBar(words.length);	pb.show();			// cache sort_codes from web	pb.title('Obtención de códigos');	for (var i=0; i<words.length; ++i)	{		this.codes[i] = words[i].contents;		pb.message('Buscando código corto para ' + this.codes[i]);				if (this.sort[this.codes[i]] == undefined)			this.sort[this.codes[i]] = this.getAlmCodes(this.codes[i]);				pb.step();				if (pb.wnd.cancelar)			return ;			}	this.makeCache();			// reset the findText preferences	app.findTextPreferences.appliedParagraphStyle = null;	app.findTextPreferences.appliedCharacterStyle = null;		// for each large_code find and process associated sort_code	pb.title('Insertando códigos cortos');	pb.reset(0);	var code_equiv;	for (var i=0; i<this.codes.length; ++i)	{		code_equiv = this.sort[this.codes[i]];		pb.message('Insertando código: ' + this.codes[i] + ' [' + code_equiv + ']');				if (code_equiv == '')			this.error.push(this.codes[i] + '\tNo disponible.');		else			this.appendSortCode(this.codes[i], code_equiv);					pb.step();				if (pb.wnd.cancelar)			return ;	}	pb.close();}CodeShift.prototype.run = function() {	this.processCodes();		if (this.error.length > 0)		this.errorInform();}// ----------------------------------------------------------------------------function JSProgressBar(iter){	this.createProgressBar = function(iter)	{		this.wndResource =			"window \			 { \				orientation:'row', \				alignChildren:'bottomr', \				text: 'GENERACIÓN DE CÓDIGOS CORTOS', \				mainPanel: Panel \				{ \					label1: StaticText { text: 'Progreso total', preferredSize:[350, 20], }, \					pgBar1: Progressbar { text: '', preferredSize:[350, 10], maxvalue:'" + iter + "' }, \					labelLog: StaticText { text: '', preferredSize:[350,20], }, \					cancel: Button { text:'Cancel', }, \				}, \			 }"		this.wnd = new Window(this.wndResource);		this.wnd.mainPanel.cancel.onClick = this.close;		this.wnd.cancelar = false;	}	this.step = function()	{		this.wnd.mainPanel.pgBar1.value = (this.wnd.mainPanel.pgBar1.value + 1);	}	this.show = function() { this.wnd.show(); }	this.close = function() { this.wnd.cancelar = true; this.wnd.close(); }	this.hide = function() { this.wnd.hide(); }	this.update = function() { this.hide(); this.show(); }	this.message = function(msg) { this.wnd.mainPanel.labelLog.text = msg; }	this.title = function(tlt) { this.wnd.mainPanel.label1.text = tlt; } 	this.reset = function(init) { this.wnd.mainPanel.pgBar1.value = init; }	this.createProgressBar(iter);			return this;}// ----------------------------------------------------------------------------app.doScript(main_codAlm,    ScriptLanguage.JAVASCRIPT   , null  , UndoModes.ENTIRE_SCRIPT   , 'Cod. Corto');/** Busca en todo el documento activo cualquier ocurrencia de un código 	de artículo y lo sustituye por el código equivalente, según el archivo	de códigos suministrado.	*/function main_codAlm(){	if (app.documents.length === 0)	{		alert('No hay ningún documento abierto');		return ;	}		var code = new CodeShift(app.activeDocument, '~/codigos_alm.csv');	code.run();	}