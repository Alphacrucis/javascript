#target "indesign"#targetengine "medianis"#strict on// http://extendables.org/#include "~/_scripts/frameworks/Extendables/extendables.jsx"#include "~/_scripts/lib/timer.jsx"#include "~/_scripts/lib/indesign.jsx"#include "lib/IKEA.jsx"var data;var errors = [];var DEBUG = false;var INCREMENTAL = false; // al lanzar por segunda vez el script, ignorar los códigos ya en verde                         // FIXME: ojo, al activar esto falla, porque al estar cambiados los                          // precios de RD$ a US$ se confunde con el orden de los preciosvar colorNO = crearColor(app.activeDocument, "PRECIO_NO_ACTUALIZADO", [0, 100, 100, 0]);var colorSI = crearColor(app.activeDocument, "PRECIO_ACTUALIZADO", [75, 0, 100, 0]);function crearColor(doc, nombre, rgb){    var color = doc.colors.itemByName(nombre);    if (color != null) return color    return doc.colors.add( { name:nombre, colorValue:rgb } );}function crearEstilo(doc, nombre){    var style = doc.characterStyles.itemByName(nombre);    if (style != null) return style;    return doc.characterStyles.add( { name:nombre } );}function actualizarPrecios(doc, re, reC, pairsUPDATE){    var pairsPC = [];    // genera pairsPC: pares de objetos Word (codigo,precio)    doc.allPageItems.filter( function(pi) { return pi instanceof TextFrame && re.test(pi.contents); } )                    .forEach( function(tFrame) {                        // elimina las posibles marcas de etiqueta                        IKEA.removeLabelMarks(tFrame);                                                var w;                        var precio=null,codigo=null;                                                // algunas cajas tienen el código ANTES que el precio                        for (var i=0, e=tFrame.words.length; i<e; ++i) {                            w = tFrame.words[i];                            if (DEBUG) var wc = w.contents;                                                     /* DEBUG */                            if (precio == null && codigo == null && re.test(w.contents))                                precio = w;                            else if (codigo == null && precio == null && reC.test(w.contents))                                codigo = w;                                                            if (precio != null && reC.test(w.contents)) {                                pairsPC.push({ wCodigo:w, wPrecio:precio, actualizado:false });                                if (DEBUG) $.writeln(w.contents + ' -> ' + precio.contents);                    /* DEBUG */                                precio = null;                            }                            else if (re.test(w.contents) && codigo!=null) {                                pairsPC.push({ wCodigo:codigo, wPrecio:w, actualizado:false });                                if (DEBUG) $.writeln(codigo.contents + ' -> ' + w.contents);                    /* DEBUG */                                codigo = null;                            }                        }                    });    var reemplazados = 0;    var no_reemplazados = 0;     pairsPC.forEach( function(pc) {        if ((INCREMENTAL) && (pc.wPrecio.fillColor.name == "PRECIO_ACTUALIZADO"))            return ;                    var code = IKEA.extractIKEACode(pc.wCodigo.contents);        if (pairsUPDATE[code] != null && pairsUPDATE[code])        {            pc.wPrecio.characters.everyItem().fillColor = colorSI;            pc.wPrecio.contents = pc.wPrecio.contents.replace(/(\d+,)?\d+/m, pairsUPDATE[code].toString());            pc.actualizado = true;            reemplazados++;        } else {             no_reemplazados++;            pc.wPrecio.characters.everyItem().fillColor = colorNO;            if (DEBUG) $.writeln("Falló " + pc.wCodigo.contents);                                               /* DEBUG */            errors.push(code + '{' + pc.wCodigo.contents + ' id:' + pc.wCodigo.parentTextFrames[0].id + '}')         };    } );        if (DEBUG) $.writeln("Códigos reemplazados: " + reemplazados);    if (DEBUG) $.writeln("Códigos fallidos: " + no_reemplazados);}function loadFromCSV(fileName){    if (fileName == null) return null;        // formato [ data[codigo] = precio ]    var data = {};    var stream = function() {        var f = File(fileName); f.open(); var r = f.read(); f.close(); return r;    }();            stream.split('\n').filter( function(line) { return line != '' && ! isNaN(line.split(';')[0]) && line.split(';')[1] != '0' && line.split(';')[1] != ''; })                      .forEach( function (line) {                           var d = line.split(';')                          var code = d[0].replace(/\./g,'');                              var price = d[1].replace(',','.');                          while (code.length < 8) code = '0' + code;                                                    data[code] = price;                       });    $.writeln(data.keys().length);//    data.keys().forEach( function(k) { $.writeln(k+' = ' +data[k]); });                    return data;}function errorInform(errors){	var wndResource =		"window \		 { \			orientation:'column', \			text: 'INFORMACIÓN DE ERRORES', \			mainPanel: Panel \			{ \				label1: StaticText { text:'Listado de errores encontrados.', }, \				listbox1: ListBox { preferredSize:[350, 200], }, \			}, \			bPanel: Group \			{ \				open:  Button { text:'Abrir como texto', }, \				close: Button { text:'Close', }, \			} \		 }"	var dlg = new Window(wndResource);		dlg.bPanel.close.onClick = function() { dlg.close(); }	dlg.bPanel.open.onClick = function() 	{		var i=1;				while (File('~/tmp_actualizar_precios_' + i + '.txt').exists) 			++i;				var f = new File('~/tmp_actualizar_precios_' + i + '.txt');		f.open("w");		for (var i=0; i<errors.length; ++i)			f.writeln(errors[i]);					f.close();		f.execute();				dlg.close(); 	}	dlg.mainPanel.listbox1.onDoubleClick = function() {         var s = this.selection.toString().match(/id:(\d+)/);        if (s != null) {            var id = s[1];            var obj = app.activeDocument.pageItems.itemByID(Number(id));            app.select(obj);            app.activeWindow.zoomPercentage = 100;            app.activeWindow.zoom(ZoomOptions.FIT_PAGE);        }    }		for (var i=0; i<errors.length; ++i)		dlg.mainPanel.listbox1.add('item', errors[i]);	dlg.show();}function reemplazarEnDocumento(doc, reC, re, pairsUPDATE){    actualizarPrecios(doc, re, reC, pairsUPDATE);    var state = saveSearchState();    prepareSearch(true, false); // caseSensitive, not wholeWord    app.findTextPreferences.appliedCharacterStyle.fillColor = "PRECIO_ACTUALIZADO";    app.findTextPreferences.fillColor = "PRECIO_ACTUALIZADO";    searchAndReplace(doc, IKEA.PRICESYMBOL.RD, IKEA.PRICESYMBOL.PR);    restoreSearchState(state);    if (errors.length > 0)        errorInform(errors);}function reemplazarTextFramesRelacionados(tFrame1, tFrame2, reC, reP, pairsUPDATE){    // detecta qué textframe tiene el precio y cual el código    var tfCodigo;    var tfPrecio;        if (reC.test(tFrame1.contents.toString())) tfCodigo = tFrame1;    else if (reC.test(tFrame2.contents.toString())) tfCodigo = tFrame2;    else { alert('Ninguno de los TextFrames contiene códigos'); return ; }        if (reP.test(tFrame1.contents.toString())) tfPrecio = tFrame1;    else if (reP.test(tFrame2.contents.toString())) tfPrecio = tFrame2;    else { alert('Ninguno de los TextFrames contiene precios'); return ; }        var codigos = tfCodigo.contents.toString().match(reC);    var wPrecios = tfPrecio.words.everyItem().getElements();    wPrecios.forEach( function(w, i) {        var code = IKEA.extractIKEACode(codigos[i]);        if (pairsUPDATE[code] != null && pairsUPDATE[code])        {            try { wPrecios[i].fillColor = colorSI; } catch(e) { alert(a); }            wPrecios[i].contents = wPrecios[i].contents.replace(/(\d+,)?\d+/m, pairsUPDATE[code].toString());            wPrecios[i].contents = wPrecios[i].contents.replace("RD", "US");        } else {             wPrecios[i].characters.everyItem().fillColor = colorNO;        };    } );}function reemplazarPrecio(tFrame, reP){    var wPrecio = tFrame.words.everyItem().getElements().filter( function(w) { return reP.test(w.contents); } )[0];    var nuevo = prompt('Nuevo importe');    try { wPrecio.fillColor = colorSI; } catch(e) { alert(a); }    wPrecio.contents = wPrecio.contents.replace(/(\d+,)?\d+/m, nuevo);    wPrecio.contents = wPrecio.contents.replace("RD", "US");}function informarDePrecio(text, pairsUPDATE){    var code=IKEA.extractIKEACode(text.contents);    if (pairsUPDATE[code]) {        var old_sel = app.selection;        var tf = app.activeWindow.activePage.textFrames.add({ contents:pairsUPDATE[code], geometricBounds:[0,0,100,100] });        app.select(tf.characters[0]);         tf.characters.everyItem().getElements().slice(1).forEach( function(c) {            app.select(c, SelectionOptions.ADD_TO);        } );        app.copy();        tf.remove();        app.select(old_sel);        alert(pairsUPDATE[code]);    } else alert('CÓDIGO SIN INFORMACIÓN');}function main(){    var doc = app.activeDocument;    var fileName;    if (File('~/Desktop/codigos_precios.csv').exists)        fileName = File('~/Desktop/codigos_precios.csv');    else fileName = File.openDialog('Listado de actualización de CÓDIGOS-PRECIOS'                                   , function(f) { return f.name.toLowerCase().split('.csv').length > 1                                                       || f.constructor.name == 'Folder'; }                                  , false);                                      if (! data)        data = loadFromCSV(fileName);    if (data != null) {        if (app.selection.length == 1)        {            if (app.selection[0].constructor.name == 'TextFrame') // caja de texto con precio sin código                reemplazarPrecio(app.selection[0], IKEA.PRICE.RD);            else // código seleccionado, devolver el precio para dicho código                informarDePrecio(app.selection[0], data);        }        else if (app.selection.length == 2)            reemplazarTextFramesRelacionados(app.selection[0], app.selection[1], IKEA.reCODE, IKEA.PRICE.RD, data);        else if (confirm('¿Actualizar precios en todo el catálogo?'))            reemplazarEnDocumento(doc, IKEA.reCODE, IKEA.PRICE.RD, data);    }}if (DEBUG) timeDiff.setStartTime();app.doScript(main,    ScriptLanguage.JAVASCRIPT   , null  , UndoModes.ENTIRE_SCRIPT  , 'Actualizar Precios');if (DEBUG) $.writeln("Script execution time: " + timeDiff.getDiff() / 1000 + " seconds");