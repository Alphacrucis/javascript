#target "indesign"#targetengine "medianis"#strict on// http://extendables.org/#include "lib/lib_codigos.jsx"function crearColor(doc, nombre, rgb){    var color = doc.colors.itemByName(nombre);    if (color != null) return color    return doc.colors.add( { name:nombre, colorValue:rgb } );}function UITable(values) {    var rce = """palette {                     orientation:'row', alignChildren:'fill',                     text: 'TABLA PRECIOS',                     preferredSize:[490, 520],                    mainPanel: Panel {                        alginment:'fill',                        alignChildren:'fill',                        table : ListBox {                             preferredSize:[480, 475],                             properties:{ numberOfColumns:4, showHeaders:true, columnTitles:["Código", "Precio en página", "Precio Ref.", "Página"],                            columnWidths:[160, 130, 130, 60], },                         },                    },                  }""";    var wnd = new Window(rce);        values.forEach( function(v) {        var row = wnd.mainPanel.table.add('item', v[0]);        row.subItems[0].text = v[1];        row.subItems[1].text = v[2];        if (v[4].parentTextFrames && v[4].parentTextFrames[0].parentPage)            row.subItems[2].text = v[4].parentTextFrames[0].parentPage.name;    });    wnd.mainPanel.table.onDoubleClick = function () {         if (this.selection) {             app.select(app.activeDocument.pages[Number(this.selection.subItems[2].text)-1]);             app.activeWindow.zoom(ZoomOptions.FIT_PAGE);        }    };    wnd.show();}function extractCodePricePairs(doc, pg){    var pairs = [];        var tf = textFramesGrep(doc, rePrice, pg);        pg && pg.setMax(tf.length);    pg && pg.show("Códigos encontrados");        tf.forEach(function(textFrame) {        pairs = pairs.concat(getIKEACodePricePairs(textFrame));        pg && pg.step("Códigos encontrados: " + pairs.length.toString());    });    return pairs.sort(function(a, b) {         if (a[0] < b[0]) return -1;        else if (a[0] > b[0]) return 1;        else return 0;     }); // Use custom comparator}function mkUnique(arr, item_i) {    var new_arr = [];        var i = item_i ? item_i : 0;        var set = {};    arr.forEach( function(row) {         if (set[row[i]] == undefined) {            new_arr.push(row);                    set[row[i]] = true;        }    } );    set = null;    return new_arr;}function mkObject(arr, item_i) {    var Obj = {};    var i = item_i ? item_i : 0;        arr.forEach( function(row) { Obj[ row[i] ] = row; } );    return Obj;}/* Se genera un fichero csv con la siguiente extructura:        código; precio en indesign; precio original; precio actualizar;*         donde el '*' es una marca que aparece cuando precio en indesign no         coincide con precio original */function saveTableToFile(file, table, unique, show) {    var dst = file ? File(file) : File.saveDialog("Indicar fichero de destino");    var f_dst = File(dst);        f_dst.open("w");    f_dst.writeln("Código;Precio Indesign;Precio Original;Precio Actualizar");    var tableF = unique ? mkUnique(table) : table;    tableF.forEach( function(row) {         f_dst.writeln(row.slice(0, 3).join(";")); }     );    tableF = undefined;    f_dst.close();        if (show)        f_dst.execute();}    function loadDataFromFile(fileName, sepBy) {    var sep = sepBy ? sepBy : ";";        var file = File(fileName);    file.open();        var data = [];    while (! file.eof ) {        var line = file.readln().split(sep);        var item = [];        for (var i=0; i<line.length; ++i)             item.push(line[i]);        data.push( item );    }        file.close();        return data;}function filterCode(codePricePairs, code, i) {    var r = codePricePairs[codeToNumber(code)];    if (r)         return r[i];    else         return "";}function updatePrices(doc, table, pg) {    var colorCAMBIO = crearColor(doc, "CAMBIADO", [75, 0, 100, 0]);        pg && pg.show("Actualizando precios");    pg && pg.setMax(table.length);    table.forEach( function(row) {        pg && pg.step("Actualizando precios: " + row[0]);        var match = row[3];        var price = row[5];                price.fillColor = colorCAMBIO;        if (price.contents.toString().indexOf('/') >= 0)            price.contents = match + '/' + price.contents.toString().split('/')[1];        else            price.contents = match;    });}function markAsError(doc, table, pg) {    var colorCAMBIO = crearColor(doc, "ERROR", [0, 100, 100, 0]);        pg && pg.show("Códigos no encontrados");    pg && pg.setMax(table.length);    table.forEach( function(row) {        pg && pg.step("Códigos no encontrados: " + row[0]);        row[4].fillColor = colorCAMBIO;        row[5].fillColor = colorCAMBIO;    });}function main() {    var pg = ProgressBar(0, "Generando listado de códigos y precio del documento")    var forg = File.openDialog ("Fichero con precios originales");    if (!forg) return ;        pg.show("Cargando lista de precios originales");    // El fichero de precios originales ha de tener la siguiente estructura: "código;precio original;precio actualizado"    var referenceTable = mkObject(loadDataFromFile(forg));        if (referenceTable) {        // relación de códigos y precios en el documento actual en formato [codigo, precio, Object Word (codigo), Object Word precio]        var table = extractCodePricePairs(app.activeDocument, pg);                // Tabla extendida -> [código, precio en página, precio de referencia, precio nuevo, Object Word (codigo), Object Word precio]        var xTable = table.map( function(row) {            return [row[0], row[1],                     filterCode(referenceTable, row[0], 1),                     filterCode(referenceTable, row[0], 2),                    row[2], row[3]];        });            table = null;        referenceTable = null;                var check = function(row) { return row[1].indexOf('PR$') >= 0 || priceToNumber(row[1]) === priceToNumber(row[2]); }                // Crea una Objeto con aquellos productos que coincide el precio en página con el precio de referencia        var matchingPrices = [];        // Crea una tabla con aquellos productos EN LOS QUE NO COINCIDE el precio en página con el precio de referencia        var wrongPrices = [];                xTable.forEach( function(row) {            if (check(row))                matchingPrices.push(row);            else                wrongPrices.push(row);        } );                xTable = null;                // HACE LA ACTUALIZACIÓN DE PRECIOS        updatePrices(app.activeDocument, matchingPrices, pg);        markAsError(app.activeDocument, wrongPrices, pg);        if (wrongPrices && wrongPrices.length > 0) {            UITable(mkUnique(wrongPrices));            saveTableToFile('~/CodigoPrecios_error.csv', wrongPrices, true, false);        }                matchingPrices = null;        wrongPrices = null;    }    pg.close();}main();//~ app.doScript(main,//~     ScriptLanguage.JAVASCRIPT //~   , null//~   , UndoModes.ENTIRE_SCRIPT//~   , 'Actualizar Precios');