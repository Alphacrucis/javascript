#strict onvar ui = require("ui")#include "UI.jsx"IKEA.UI = (function() {    var self = this;    var exported = { name:'IKEA submodule: UI' };        exported.show_product = function(product) {        if (!product) {            throw ErrorValidacion('No se ha indicado ningún producto en linea ' + $.line);        }        return this.createProductWindow(800, 600, 'Producto con ref. ' + product.get('formatNumber'))                   .assignProduct(product)                   .show();    };    exported.createProductWindow = function(width, height, title) {        var defWin = app.windows.length > 0 ? app.activeWindow : { bounds: [0, 0, 800, 600] };        var mixins = {            'mainWindow': { 'preferredSize': centerRelativeTo(defWin, width, height),                            'alignChildren':'left',                            'alignment':'fill',                          },            'button': { 'preferredSize': [120, 24],  },            'button_2': { 'preferredSize': [80, 24],  },            'nospc': { 'spacing':0 },            'panelStyle': { 'alignment':['left', 'fill'], 'alignChildren':'left' },            'stacked': { 'orientation': 'stack' },            'edit_0': { 'size':[30, 24], },            'edit_1': { 'size':[50, 24], },            'edit_2': { 'size':[90, 24], },            'edit_3': { 'size':[110, 24], },            'edit_4': { 'size':[150, 24], },            'edit_5': { 'size':[200, 24], },            'edit_6': { 'size':[339, 24], },            'edit_7': { 'size':[608, 24], },            'blkl': { size:[440, 130] },            'blkr': { size:[245, 130] },            'row_3':  { alignment: ['fill','fill' ], size:[440, 30], },            'col_r': { alignment: ['fill','fill' ], alignChildren:'top', size:[245, 200], },            'col_l': { size:[440, 200] },            'third': { size:[width-50, height/3-80] },            'lefty': { alignChildren:'left' },            'minicheck': { 'margins': [0,0,0,0], 'preferredSize': [16,10], 'spacing': 0 },        };        var _n = function(key) { return IKEA[key]; };        var _l = function(key) { return IKEA.labels[IKEA[key]]; };        /* structure */        var wnd = ext_UI(new ui.Dialog(title).with(mixins));                wnd.structure = {};                wnd.checkboxes = {};                // shotcut for label + input with the product        wnd.constructor.prototype.l_input = function(key) {             return this.input_labeled(_l(key), _n(key));        }        // shotcut for checkbox + label + input with the product        wnd.constructor.prototype.cl_input = function(key) {            var cb = this.checkbox('cb_' + _n(key), '').using('minicheck');            wnd.checkboxes[key] = cb['cb_'+_n(key)];            return cb.input_labeled(_l(key), _n(key));        }        wnd.constructor.prototype.input_ = function(key, isMain) {            if (!!isMain) {                return this.cl_input(key);            }            return this.l_input(key);        }        // shotcut for label + multi_input with the product        wnd.constructor.prototype.l_multinput = function(key) {             return this.input_multi(_l(key), _n(key));        }        // shotcut for checkbox + label + multi_input with the product        wnd.constructor.prototype.cl_multinput = function(key) {             var cb = this.checkbox('cb_' + _n(key), '').using('minicheck');            if (!wnd.checkboxes[key]) {                wnd.checkboxes[key] = cb;            }            return cb.input_multi(_l(key), _n(key));        }        // Create Tab + TabPanels        var tabLabels = ['Artículo', 'Más información', 'Componentes'];        var control_panels = function(label) {            tabArticle.window.visible = label == tabLabels[0];            tabInfo.window.visible = label == tabLabels[1];            tabSubs.window.visible = label == tabLabels[2];        }        wnd.column('main').using('mainWindow').tabbedPanel(tabLabels, control_panels);        wnd.activeTabText = 'Artículo';               // Builds the widget for the main product information        wnd.constructor.prototype.productDetaill = function(isMain) {             this.row('r1')                .input_('CF_FORMATNUMBER', isMain).using('edit_2')                .input_('CF_ALMCOD', isMain).using('edit_1')                .input_('CF_NAME', isMain).using('edit_6');                                this.row('r2')                .input_('CF_FACTS', isMain).using('edit_7');                                this.row('r3').column('c1').using('blkl').row('r1').using('row_3')                .input_('CF_COLOR', isMain).using('edit_5')                .input_('CF_SIZE', isMain).using('edit_3');                                this.r3.c1.row('r2').using('row_3')                .input_('CF_PRICENORMAL', isMain).using('edit_1')                .l_input('CF_PRICEORIGINAL').using('edit_1')                .l_input('CF_PRICESALE').using('edit_1');                                this.r3.c1.row('r3').using('row_3')                .l_input('CF_ASSEMBLY').using('edit_0')                .l_input('CF_CURRENCY').using('edit_0')                .l_input('CF_PACKAGE').using('edit_2');                                this.r3.c1.row('r4').using('row_3')                .input_('CF_DESIGNER', isMain).using('edit_6');            this.r3.column('c2').using('panelStyle').stack('s1')                    .panel('imgbg').using('blkr')                    .image('img').using('blkr');                                 return this;        };        wnd.main.column('tabContainer').using('stacked');                /** Tab "Artículo" */        var tabArticle = wnd.main.tabContainer.panel('particle').using('panelStyle');        tabArticle.productDetaill(true);        tabArticle.row('r4').column('c1')            .cl_multinput('CF_CUSTMATERIALS').using('col_l');                tabArticle.r4.column('c2').using('col_r')            .l_multinput('CF_MEASURE').using('col_r');                                /** Tab "Información" */        var tabInfo = wnd.main.tabContainer.panel('pinfo').using('panelStyle');        tabInfo.column('c1')            .cl_multinput('CF_GOODTOKNOW').using('third')            .cl_multinput('CF_CAREINST').using('third')            .cl_multinput('CF_CUSTBENEFIT').using('third');                                /** Tab "Información" */        var tabSubs = wnd.main.tabContainer.panel('psubs').using('panelStyle');        var subList = tabSubs.column('c1').using('lefty')            .text('lb_subs', 'Compuesto por')            .list(IKEA.CF_SUBITEMS, ['Cod. Subartículo', 'Cod. Corto', 'Artículo']).using("third");        tabSubs.c1            .text('lb_resumen', 'Resumen de características del subartículo seleccionado')            .panel('p1')                .productDetaill();                tabArticle.window.visible = true;        tabInfo.window.visible = false;        tabSubs.window.visible =  false;                    /** Buttons */                    wnd.main.row('buttons').button('accept', 'Aceptar').using('button_2')                               .button('cancel', 'Cerrar').using('button_2');                wnd.window.cancelElement = wnd.main.buttons.cancel;        wnd.main.buttons.accept.on('click').do(function() { this.window.close(); });        wnd.main.buttons.cancel.on('click').do(function() { this.window.close(); });                wnd.window.layout.layout(1);        /** Members */        wnd.window.cancelElement = wnd.main.buttons.cancel;                wnd.main.buttons.accept.on('click').do(function() { this.window.close(); });        wnd.main.buttons.cancel.on('click').do(function() { this.window.close(); });                subList.window.on('click').do(function() {             this.selection.text && wnd.assignSubProduct(this.selection.text);         });                wnd.assignProduct = function(product) {            // save the product in the window, for later access            wnd.product = product;                        // TODO: change the complex code of _mapUI for something similar to            //       assignSubProduct function            var _mapUI = function(key, wnd_, product_) {                /** finds a control in the window with name equals to key                    and assign the proper value.                                        wnd_ -> root window for the find command                    */                var w = wnd_.find(key);                if (w) {                    var d = product_.get(key);                                    if (d) {                        if (d.is(Array)) {                            w.text = d.join('\n');                        } else if (d.is(String)) {                            w.text = d;                        } else {                            w.text = _join(d);                        }                    }                }            };                    var _join = function(ob) {                var keys = ob.keys();                return ob.values().map( function(item, index){                    if (isNaN(Number(keys[index]))) {                        return keys[index] + ': ' + item;                    } else {                        return item;                    }                }).join('\r');            };            for (prop in IKEA) {                if (prop.slice(0,3) === 'CF_') {                    _mapUI(IKEA[prop], wnd, product);                }            }            // Special case for subitems            var subs = product.get(IKEA.CF_SUBITEMS);                        subs.values().forEach(function(prod){                var v = tabSubs.c1[IKEA.CF_SUBITEMS].window.add('item', prod[IKEA.CF_FORMATNUMBER]);                v.subItems[0].text = prod[IKEA.CF_ALMCOD] || "";                v.subItems[1].text = (prod[IKEA.CF_NAME] || "") + ' ' + (prod[IKEA.CF_FACTS] || "");            });            // ** load configuration (for visual checkbox)            if (IKEA.Config.current_config) {                IKEA.Config.activeFields().each(function(field) {                    wnd.checkboxes[field].value = true;                });            }            return wnd;        };            wnd.assignSubProduct = function(partNumber) {            // TODO: locate the object from the partNumber            var prod = wnd.product.attributes[IKEA.CF_SUBITEMS].values().filter(function(item) {                 return item[IKEA.CF_FORMATNUMBER] === partNumber;            }).first();                    $.bp();            tabSubs.c1.p1.find(IKEA.CF_FORMATNUMBER).text = partNumber;            tabSubs.c1.p1.find(IKEA.CF_ALMCOD).text = prod[IKEA.CF_ALMCOD] || '';            tabSubs.c1.p1.find(IKEA.CF_NAME).text = prod[IKEA.CF_NAME] || '';            tabSubs.c1.p1.find(IKEA.CF_FACTS).text = '3';            tabSubs.c1.p1.find(IKEA.CF_COLOR).text = '4';            tabSubs.c1.p1.find(IKEA.CF_SIZE).text = '5';            tabSubs.c1.p1.find(IKEA.CF_PRICENORMAL).text = '6';            tabSubs.c1.p1.find(IKEA.CF_PRICEORIGINAL).text = '7';            tabSubs.c1.p1.find(IKEA.CF_PRICESALE).text = '8';            tabSubs.c1.p1.find(IKEA.CF_ASSEMBLY).text = '9';            tabSubs.c1.p1.find(IKEA.CF_CURRENCY).text = '10';            tabSubs.c1.p1.find(IKEA.CF_PACKAGE).text = '11';            tabSubs.c1.p1.find(IKEA.CF_DESIGNER).text = '12';        };        wnd.show = function() {            wnd.window.show();            return wnd;        };                return wnd;    }    return exported;})();