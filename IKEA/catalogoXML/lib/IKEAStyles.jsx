/** IKEA Styles API    Author: Javier Ramos        Apply indesign styles to IKEA articles    */#strict onif (IKEA) {    // Extends IKEA module with a submodule for styling capabilities    // IKEA.Styles = IKEA.Styles || (function() {    IKEA.Styles = (function() {        var self = this;                var exported = { name:'IKEA submodule: Styles' };        var default_swatches = [ { name: 'Azul ALM', colorValue: [100, 60, 0, 40], space: ColorSpace.CMYK },                                  { name: 'Sin Precio', colorValue: [0, 100, 100, 0], space: ColorSpace.CMYK }                               ];        var default_styles = [ { name: 'Articulo' , appliedFont: 'Verdana IKEA\tRegular', pointSize: 7.25, tracking: -40, kerningValue: 9.5 } ];                exported.ALMCODE = 'AlmCOD';        exported.createDefaultStyles = function(doc) {            if (app.documents.length === 0) {                return ;            }                    doc = doc || app.activeDocument;            default_styles.forEach(function(style) {                if (!doc.paragraphStyles.item(style.name).isValid) {                    doc.paragraphStyles.add(style);                }            });                        default_swatches.forEach(function(swatch) {                if (!doc.colors.item(swatch.name).isValid) {                    doc.colors.add(swatch);                }            });                    };        exported.style = function(name, doc) {            doc = doc || app.activeDocument;                        if (!doc.paragraphStyles.item(name).isValid) {                this.createDefaultStyles();            }                    return doc.paragraphStyles.item(name);        };        exported.apply = function(target) {            // apply styles to the target element            var self = this;            var xmlElement_Action = function(xmlE) { exported.applyStyleToElement(xmlE); }                            collectionToArray(target.texts).forEach(function(container){                try {                    if (container.paragraphs) {                        container.paragraphs.everyItem().applyParagraphStyle(self.style('Articulo'));                        // container.paragraphs.everyItem().clearOverrides();                    }                } catch(e) {                     app.scriptPreferences.enableRedraw = true;                    throw e;                 }                                try {                    container.associatedXMLElement.children().forEach(xmlElement_Action);                } catch(e) {                    container.associatedXMLElements.forEach(xmlElement_Action);                }            });        }        exported.applyStyleToElement = function(xmlElement) {            var tagName = xmlElement.markupTag.name.toLowerCase();                        if (self.has_own('style_on_' + tagName)){                self['style_on_'+tagName].call(this, xmlElement);            } else {                xmlElement.words.everyItem().fontStyle = 'Normal';            }        }        //* Styling functions for each tag name  ********************************************                this.style_on_article = function(xmlElement) {            xmlElement.children().forEach( function(xmlElement) {                 IKEA.Styles.applyStyleToElement(xmlElement)             } );        };        this.style_on_name = function(xmlElement) {            xmlElement.words.everyItem().fontStyle = 'Bold';        };        this.style_on_description = function(xmlElement) {            xmlElement.words.everyItem().fontStyle = 'Bold';            collectionToArray(xmlElement.words).forEach(function(w) {                w.contents = w.contents.toString().toLowerCase().replace('..', '.');            });        };        this.style_on_price = function(xmlElement) {            var symbol = IKEA.price_symbol();            var price = Number(xmlElement.texts[0].contents.replace(symbol, ''))                        xmlElement.words.everyItem().fontStyle = 'Bold';            if (price === 0) {                xmlElement.texts.everyItem().fillColor = app.activeDocument.colors.item('Sin Precio');            }        };        this.style_on_color = function(xmlElement) {            xmlElement.words.everyItem().fontStyle = 'Normal';                        var s = xmlElement.words.firstItem().contents.toString();            s = s.slice(0,1).toUpperCase() + s.slice(1).rtrim();            if (s.endswith('.')) {                s = s.slice(0,-1)            }            xmlElement.words.firstItem().contents = s;        };        return exported;    })();}