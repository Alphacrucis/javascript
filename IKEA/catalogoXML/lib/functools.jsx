if (!Object.prototype.getProperties) {    Object.prototype.getProperties = function(filter) {        var res = [];        for (var prop in this) {            try {                if (typeof(this[prop]) !== 'function') {                    if (!filter || typeof(this[prop]) !== filter) {                        res.push(prop);                    }                }            } catch(e) {};        }        return res;    }    Object.prototype.getProps = Object.prototype.getProperties;}/* callback(value, prop, object) */Object.prototype.eachProperty = function(callback) {    for (var prop in this) {        try {            if (typeof(this[prop]) !== 'function') {                callback(this[prop], prop, this);            }        } catch(e) {};    }}Object.prototype.eachProp  = Object.prototype.eachProperty;var objectKeysToLowerCase = function(ob) {    if (typeof(ob) !== 'object') {        return ob;    }    var res = {}, t_;    for (var key in ob) {        try {            _t = typeof(ob[key]);             if (_t === 'object') {                res[key.toLowerCase()] = objectKeysToLowerCase(ob[key]);            } else if (_t !== 'function') {                res[key.toLowerCase()] = ob[key];            } else {                res[key] = ob[key];            }        } catch(e) { }    }    return res;}if (!Array.prototype.each) {    Array.prototype.each = function(callback) {        for (var i=0; i<this.length; ++i) {            callback(this[i], i, this);        }    }}if (!Array.prototype.first) {    Array.prototype.first = function() {        if (this.length > 0){            return this[0];        }    }}if (!Array.prototype.last) {    Array.prototype.last = function() {        if (this.length > 0) {            return this.slice(-1);        }    }}if (!Array.prototype.trim) {    Array.prototype.trim = function() {        return this.map(function(v) {             if (v.has('trim')) {                return v.trim();             }            return v;        });    }}if (!Array.prototype.toSet) {    Array.prototype.toSet = function() {        var set = {};        this.map(function(v) {            set[v] = true;        });        return set;    }}/**  mapf :: [a] -> (a -> b) -> [b]     use: ['a ', 'b ', ...].mapf('trim')*/if (!Array.prototype.mapf) {    Array.prototype.mapf = function(funName) {        return this.map(function(v) {             if (v.has(funName)) {                return v[funName]();             }            return v;        });    }}var eval_safe = function(obj_str, root){    /** Use a more safe eval, that, for example,         change al the "null" by actual null values.        root: true -> first node, apply eval and then check recursively              false -> don't apply eval to the obj_str parameters              By default (undefined) treat as true        */    var obj = obj_str;    if (root === undefined || !!root) {        obj = eval(obj_str);    }    return obj;};          /** Adds a safe get function. Return undefined if the value not in the object.    Ignore case for the properties    */Object.prototype.get = function(key) {    gstring(key);        if (this.keys().contains(key)) {         return this[key];     }    key = key.toLowerCase();    var k = this.keys().filter(function(k) { return k.toLowerCase() === key; });    if (k) {        return this[k];    }}/** Splits the string in paragraphs and upercase the     first letter of the paragraphs. Use 'sep' as paragraph    separator and 'put' as new paragraph separator to join    the paragraphs in the final string.    */String.prototype.toTitle = function(sep, put) {    sep = sep || /\.\s*/ ;    put = put || '. ';    return this.split(sep).map(function(w) {        return w.slice(0,1).toUpperCase() + w.slice(1);    }).join(put);}String.prototype.toCamelCase = function() {    return this.split('_').map(function(w) {            return w.slice(0,1).toUpperCase() + w.slice(1);        }).join('');}String.prototype.toDashCase = function() {    var cap = this.match(/[A-Z]/g);    if (cap) {        return this.split(/[A-Z]/).map(function(w, ix) {            var ws = cap[ix] ? '_' + cap[ix].toLowerCase() : "";            return w + ws;        }).join('');    } else {        return this;    }}String.prototype.in = function( /* arguments */ ) {    var args = Array.prototype.slice.apply(arguments);    return args.contains(this.toString());}String.prototype.in_ = function( /* arguments */ ) {    var args = Array.prototype.slice.apply(arguments).map(function(x){ return x.toLowerCase(); });    return args.contains(this.toString().toLowerCase());}