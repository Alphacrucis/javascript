var get_instance = function(someVar) {    return Object.prototype.toString.call(someVar).slice(8,-1).toLowerCase();}if (!Object.prototype.getProperties) {    Object.prototype.getProperties = function(filter) {        var res = [];        for (var prop in this) {            try {                if (typeof(this[prop]) !== 'function') {                    if (!filter || typeof(this[prop]) !== filter) {                        res.push(prop);                    }                }            } catch(e) {};        }        return res;    }    Object.prototype.getProps = Object.prototype.getProperties;}if (!Object.prototype.eachProperty) {    /* callback(value, prop, object) */    Object.prototype.eachProperty = function(callback) {        for (var prop in this) {            try {                if (typeof(this[prop]) !== 'function') {                    callback(this[prop], prop, this);                }            } catch(e) {};        }    }    Object.prototype.eachProp  = Object.prototype.eachProperty;}var objectKeysToLowerCase = function(ob) {    if (get_instance(ob) !== 'object') {        return ob;    }    var res = {};    for (var key in ob) {        var _t = get_instance(ob[key]);        if (_t === 'object') {            res[key.toLowerCase()] = objectKeysToLowerCase(ob[key]);        } else if (_t !== 'function') {            res[key.toLowerCase()] = ob[key];        } else {            res[key] = ob[key];        }    }    return res;}if (!Array.prototype.each) {    Array.prototype.each = function(callback) {        if (this instanceof Array) {            for (var i=0; i<this.length; ++i) {                callback(this[i], i, this);            }        }    }}if (!Array.prototype.first) {    Array.prototype.first = function() {        if (this.length > 0)            return this[0];    }}if (!Array.prototype.last) {    Array.prototype.last = function() {        if (this.length > 0)            return this.slice(-1);    }}var eval_safe = function(obj_str, root){    /** Use a more safe eval, that, for example,         change al the "null" by actual null values.        root: true -> first node, apply eval and then check recursively              false -> don't apply eval to the obj_str parameters              By default (undefined) treat as true        */    var obj = obj_str;    if (root === undefined || !!root) {        obj = eval(obj_str);    }    return obj;};          /** Exception and Error helper code    */var disable_exceptions = true;var throwE = function(TypeError, message) {    if (disable_exceptions) {        alert(TypeError.name + ': ' + message);        return false;    }    throw new TypeError(message);}var showError = function(e) {    var str = 'Excepción detectada';    if (e.name) {        str += ' (' + e.name + ')';    }    if (e.message) {        str += '\n' + e.message;    }    if (e.fileName) {        str += '\n\nEn archivo: ' + e.fileName;    }    if (e.line) {        str += '\nEn la línea [' + e.line;    }    if (e.source) {        str += ']\n\nCódigo: ' + e.source.split('\n').slice(e.line-2, e.line+2);    }    alert(str);}var print = function(/* arguments */) {    $.writeln(arguments);}var try_catch = function(fun, catch_fun, finally_fun) {    /** - Execute the code on function 'fun' and, in case of exception,           execute the 'catch_fun' function with the Exception as parameter.        - If there is a 'finally_fun' function execute it always at the end.        - If 'catch_fun' is null or undefined, ignore the exceptions.           If its true, show a simple alert. Otherwise, execute it as function.          If its a string, alert it as error.        - The return value of the function is the return value of 'fun' if any          or the return value of catch_fun in case of exception.        */    var res;    try {        res = fun();    } catch(e) {        try {            if (!catch_fun) {                 showError(e);             } else if (get_instance(catch_fun) === 'string') {                alert(catch_fun);            } else {                res = catch_fun(e);             }        } catch(e) { alert(e); }    }     if (finally_fun) {        finally_fun();    }    return res;}var ErrorValidacion = function(message) {    var er = new ValidationError();    er.message = message;    er.name = "Error Validación";    return er;}