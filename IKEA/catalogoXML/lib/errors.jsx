/** Exception and Error helper code    */var disable_exceptions = true;var throwE = function(TypeError, message) {    if (disable_exceptions) {        alert(TypeError.name + ': ' + message);        return false;    }    throw new TypeError(message);}var showError = function(e) {    var str = 'Excepción detectada';    if (e.name) {        str += ' (' + e.name + ')';    }    if (e.message) {        str += '\n' + e.message + '\n';    }    if (e.line) {        str += '\nEn la línea: [ ' + e.line + ' ]';    }     if (e.fileName) {        str += '\nEn Archivo:\n' + e.fileName;    }     if (e.source) {        str += '\n\nCódigo:\n' + e.source.split('\n').slice(e.line-2, e.line+2);    }    if (e.sourceLine) {        str += '\n\nCódigo:\n' + e.sourceLine;    }    if (e.stack) {        str += '\n\nPila de llamadas:\n' + e.stack;    }    $.writeln(str);    alert(str);}var console = { log: function(/* arguments */) {         $.writeln(Array.prototype.slice.apply(arguments).join(' '));    }};var print = console.log;/** - Execute the code on function 'fun' and, in case of exception,       execute the 'catch_fun' function with the Exception as parameter.    - If there is a 'finally_fun' function execute it always at the end.    - If 'catch_fun' is null or undefined, ignore the exceptions.       If its true, show a simple alert. Otherwise, execute it as function.      If its a string, alert it as error.    - The return value of the function is the return value of 'fun' if any      or the return value of catch_fun in case of exception.    */var try_catch = function(fun, catch_fun, finally_fun) {    var res;    try {        res = fun();    } catch(e) {        try {            if (!catch_fun) {                 showError(e);             } else if (get_instance(catch_fun) === 'string') {                alert(catch_fun);            } else {                res = catch_fun(e);             }        } catch(e) { alert(e); }    }     if (finally_fun) {        finally_fun();    }    return res;}var ErrorValidation = function(message) {    var er = new ValidationError();    er.message = message;    er.name = "Error Validación";    return er;}