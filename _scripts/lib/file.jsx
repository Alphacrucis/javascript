#include "~/_scripts/frameworks/Extendables/extendables.jsx"/*  Returns a list of [File] with all files in the `folder`, filter by `mask`. Optionaly showing    hidden files (by default not) and limiting the deep of the search with `maxRecursionLevel`        getFolderContents :: Folder -> String -> Bool -> Int -> [File]    */var getFolderContents = function(folder, fileMask, showHidden, maxRecursionLevel){    if (folder.is(String)) folder = Folder(folder);            if (showHidden == undefined) showHidden = false;    if (maxRecursionLevel == undefined) maxRecursionLevel = -1;        var files = folder.getFiles(fileMask);    if (!showHidden)        files = files.filter(function(F) { return (F.displayName[0] != '.'); });        if (maxRecursionLevel !== 0)    {        var folders = files.filter( function(F) { return F.is('Folder'); } );                    folders.forEach(function(F) {            files = files.concat( getFolderContents(F, fileMask, showHidden, maxRecursionLevel-1) );        });    }    return files;}/*  Returns a list with all files in path of type "mask".    path -> the parent path    mask -> file type ("INDD", "PDF", "TIFF", ...)    recursiveSearch -> get files in subpaths too [OPTIONAL]    progressBar -> use the progressBar pointed to show files [OPTIONAL]    */    /* DEPRECATED -> use getFolderContents instead */var get_files_in_path = function(path, mask, recursiveSearch, progressBar){    if (!Folder(path).exists) return null;        if (recursiveSearch === undefined)        recursiveSearch = false;            var pb = (progressBar == undefined) ? function() {} :                                           function(m) { progressBar.setMessage(m); };            mask = mask.toUpperCase();            var fileType = function(file) {            var fname = file.displayName;                        if ( fname.indexOf('.') >= 0 )                return fname.split('.').slice(-1).toUpperCase();            else                 return "";        }            var getFiles = function(folderPath) {            var files = Folder(folderPath).getFiles();            var result = []            for (var i=0; i<files.length; ++i)            {                if (files[i].constructor.name === 'File'                     && (mask == undefined || fileType(files[i]) == mask)                     && files[i].name[0] != '.')                {                    result.push(files[i]);                    pb('Añadido ' + files[i].name);                }                else if (recursiveSearch && files[i].constructor.name === 'Folder')                    result = result.concat( getFiles(files[i]) );            }                     return result;        }            return getFiles(path);}//~ test_getFoldercontents//~ ----------------------//~ {//~     #include "~/_scripts/lib/file.jsx"//~     #include "~/_scripts/lib/timer.jsx"//~     #include "~/_scripts/frameworks/Extendables/extendables.jsx"//~     timeDiff.setStartTime();//~     getFolderContents('/Users/javi/prg', '*.jsx', false);//~     alert(timeDiff.getDiff() / 1000);//~ }