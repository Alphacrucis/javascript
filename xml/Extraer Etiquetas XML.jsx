#target "indesign"#targetengine "medianis"#strict on#include "../_scripts/frameworks/Extendables/extendables.jsx"$debug = false;$version = "0.1.1";Object.prototype.toArray = function() {    if (this.has_own('everyItem'))        return this.everyItem().getElements();}function main() {    var dlg = new Window(    """dialog {      mainPanel : Panel {        rb_plain: RadioButton { text:'Generar lista simple', value:true },        rb_full: RadioButton { text:'Generar tabla con estructura' },        g1: Group {          bt_ok: Button { text:'Aceptar' },          bt_cn: Button { text:'Cancelar' },        },      },    }""");        dlg.mainPanel.g1.bt_ok.onclick = function(){        this.window.close();    };    dlg.mainPanel.g1.bt_cn.onclick = function(){        this.window.close();    };        dlg.defaultElement = dlg.mainPanel.g1.bt_ok;    dlg.cancelElement = dlg.mainPanel.g1.bt_cn;            if (dlg.show() == 1){ // first button is accept        if (dlg.mainPanel.rb_plain.value)            save_plainCSV(xmlExplore(app.activeDocument), '~/xml_data.csv');        else if (dlg.mainPanel.rb_full.value)            save_taggedCSV(xmlExplore(app.activeDocument), '~/xml_data.csv');    }}function _save_csv(fun, xml_data, xml_file, header) {    var dstFile = File(xml_file);    dstFile.encoding = 'utf-8';    dstFile.open("w");    dstFile.writeln(header);    try {         fun(dstFile, xml_data);    } finally {        dstFile.close();    }    dstFile.execute();}function save_plainCSV(xmlData, xml_file){    _save_csv(function(dstFile, xml_data){        xml_data.forEach(function(xml){            $.writeln(xml.toString());            dstFile.writeln(xml.toString());        });     }, xmlData, xml_file, "CONTENIDO,MARCADOR,CAMBIAR_A");}function save_taggedCSV(xmlData, xml_file){    var data = {};    var header = "";        xmlData.forEach(function(xml){        if (!data[xml.tag]) {            data[xml.tag] = [];            header += xml.tag.toUpperCase() + ",";        }        data[xml.tag].push(xml.contents);    });         _save_csv(function(dstFile, xml_data){        var keys = xml_data.keys();        var str;        for (var i=0,e=xml_data[keys[0]].length; i<e; ++i){            str = '';            keys.forEach(function(k){                str += '"' + xml_data[k][i] + '",';            });            str = str.split(',').slice(0,-1).join(',');            $.writeln(str);            dstFile.writeln(str);        }    }, data, xml_file, header.split(',').slice(0,-1).join(','));}function xmlExplore(doc){    var stories = doc.stories.toArray();    var xmlData = [];    stories.forEach(function(st){        var xml = [];        if (st.associatedXMLElement) {            xml = (getXMLElements(st.associatedXMLElement));            xmlData = xmlData.concat(xml);        }    });    return xmlData;}/** Returns a list of xml elements contents and markuptags names    */function getXMLElements(item){    var xmlData = [];    var toStr = function(e) { return '"' + e.contents.toString().replace(/^\s+/,'') +                                 '","' + e.tag.toString().replace(/^\s+/,'') + '"'; }    item.xmlElements && item.xmlElements.toArray()        .forEach(function(e) {             xmlData.push({'contents':e.contents, 'tag':e.markupTag.name                , toString: function() { return toStr(this); } });     });    return xmlData;}main();