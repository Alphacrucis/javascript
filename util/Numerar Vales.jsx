#target "indesign"#strict on/*  Numerar vales:        Genera vales numerados a partir de la plantilla de vales en el documento actual.         Requiere: que en el documento actual, los textFrames que van a contener los valores    tengan un valor patrón como etiqueta (por ejemplo, la caja que contendrá el 1, su label    sea "1"). El script usa este valor de etiqueta para calcular el nuevo valor, multiplicando    por el número de página que sea.        El contenido del textframe (el número ya puesto) se usa para calcular el número de dígitos    al que ajustar cada valor. (Por ejemplo "00001" para 5 dígitos)    */// http://extendables.org/#include "~/_scripts/frameworks/stdbrouw-Extendables-b315665/extendables.jsx"const PATH = '~/Desktop/vales/';function main(){    var opc = UI();        if (opc == undefined) return ;        var exportF;    if (opc.pdf) exportF = export_to_pdf;    else if (opc.printer) exportF = export_to_printer;    else { alert("Método de exportación desconocido"); return ; }                    if (!Folder(PATH).exists)        Folder(PATH).create();            app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;    app.scriptPreferences.enableRedraw = false;        try     {        var ini = parseInt(opc.ini);        var fin = parseInt(opc.fin);                var textFrames = app.activeDocument.allPageItems.filter( function(pi) { return pi.constructor.name === "TextFrame"; } );         var tickets = textFrames.filter( function(tf) { return tf.label != ''; } );        // max, digits, y originalValues se calculan en el próximo forEach        var max = 0;        var digits = 1;        var originalValues = [];        tickets.forEach( function(t) {             try { var v = parseInt(t.label); } catch(e) { return }                        originalValues.push( { textFrame:t, value:t.contents } );            if (v > max) max = v            if (t.contents.length > digits) digits = t.contents.length;        } );                    for (var i=ini-1; i<fin; ++i)        {            tickets.forEach( function(ticket) {                ticket.contents = formatInteger(digits, parseInt(ticket.label)+max*i);            } );                    exportF(ini, max, i, digits);        }                    Folder(PATH).execute();    } catch(e) {         alert(e);      } finally     {        // restore original values        originalValues.forEach( function(v) { v.textFrame.contents = v.value; } );                app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;        app.scriptPreferences.enableRedraw = true;    }}function UI(){    var w_rc =         """dialog                     {                         alignment:'row',                         orientation:'row',                        text: 'NUMERAR VALES',                         g1: Panel {                             g11 : Group {                                orientation:'row',                                lb2: StaticText { text:'Página Inicial:', },                                numIni : EditText { preferredSize:[40,20], text:"1", },                                lb3: StaticText { text:'Página final:', },                                numFin : EditText { preferredSize:[40,20], text:"1", },                            },                            g12: Group {                                alignment:'left',                                pdf: RadioButton { text:'Exportar a PDF', value:true},                                printer: RadioButton { text:'Imprimir', value:false },                            },                            g13: Group {                                orientation:'row',                                alignment:'fill',                                btOK : Button { text:'Acceptar', },                                g131: Group { },                                btNo : Button { text:'Cancelar', },                            }                        },                      }""";                        var wnd = new Window(w_rc);        var pIni = wnd.g1.g11.numIni;    var pFin = wnd.g1.g11.numFin;    var toPdf = wnd.g1.g12.pdf;    var toPrinter = wnd.g1.g12.printer;    wnd.g1.g13.g131.preferredSize = [120,20];    wnd.defaultElement = wnd.g1.g13.btOK;    wnd.cancelElement = wnd.g1.g13.btNo;    wnd.result = false;        wnd.g1.g13.btOK.onClick = function() { wnd.result = true; wnd.close(); };        pFin.active = true;        wnd.show();    if (wnd.result && pFin.text != '' && pIni.text != '')    {        return { ini:parseInt(pIni.text)                , fin:parseInt(pFin.text)               , pdf:toPdf.value               , printer:toPrinter.value                };    }}function formatInteger(digits, value)/*  Si valor, como cadena, tiene menos de `digits` digitos, añadir por la izquierda ceros */{	value = value + "";	while ( value.length < digits )		value = '0' + value;			return value;}function export_to_pdf(ini, max, i, digits){	var prefExportacion = "PDF Alta DECO"; 	app.pdfExportPreferences.viewPDF = false;	    var showExportPreferences = parseInt(ini) == parseInt(i+1);        var rangoIni = formatInteger(digits, 1   + parseInt(max*i) );    var rangoFin = formatInteger(digits, max + parseInt(max*i) );        var dest = new File(PATH + 'vales_' + rangoIni + '-' + rangoFin + '.pdf')        app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;    app.activeDocument.exportFile(ExportFormat.pdfType, dest, showExportPreferences);	    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;}function export_to_printer(ini, max, i, digits){    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;    app.activeDocument.print((parseInt(ini) == parseInt(i+1)));    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;}app.doScript(main,    ScriptLanguage.JAVASCRIPT   , null  , UndoModes.ENTIRE_SCRIPT  , '');