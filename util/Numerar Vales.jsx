#target "indesign"#strict on/*  Numerar vales:        Genera vales numerados a partir de la plantilla de vales en el documento actual.         Requiere: que en el documento actual, los textFrames que van a contener los valores    tengan un valor patrón como etiqueta (por ejemplo, la caja que contendrá el 1, su label    sea "1"). El script usa este valor de etiqueta para calcular el nuevo valor, multiplicando    por el número de página que sea.        El contenido del textframe (el número ya puesto) se usa para calcular el número de dígitos    al que ajustar cada valor. (Por ejemplo "00001" para 5 dígitos)        Delay: tiempo en segundos a retrasar cada exportación de página, se usa al imprimir para           evitar que las páginas no lleguen en el orden correcto a la impresora (mejor 2s o más)               Shuffle: Reordena los números para que el siguiente (1,2,...) caiga en el mismo lugar de           la página siguiente, permitiendo que al cortar los números queden ordenados.        */// http://extendables.org/#include "~/_scripts/frameworks/stdbrouw-Extendables-b315665/extendables.jsx"const PATH = '~/Desktop/vales/';function do_serial(tickets, ini, fin, n, digits, exportF, delay){    for (var i=ini-1; i<fin; ++i) {        tickets.forEach( function(ticket) {            ticket.contents = formatInteger(ticket.contents.length, Number(ticket.label)+n*i);        } );        exportF(i, digits, i==ini-1);        $.sleep(delay * 1000);    }        }function do_shuffle(tickets, ini, fin, n, digits, exportF, delay){    // Se calcula la numeración para que salga en orden inverso (primero la última página)    for (var i=ini-1; i<fin; ++i) {        tickets.forEach( function(t) {            var v = Number(t.label) - 1;            var p = fin - i;            t.contents = formatInteger(t.contents.length, Number(p+v*fin));        } );                exportF(i, digits, i==ini-1);        $.sleep(delay * 1000);    }}function main(){    if (app.documents.length == 0) return ;        var r = calcularVales(app.activeDocument);    var tickets = r.tf;    var n = r.n;    var opc = UI(n, 0);        if (opc == undefined) return ;        var exportF;    if (opc.pdf) exportF = export_to_pdf;    else if (opc.printer) exportF = export_to_printer;    else exportF = function() { app.activeDocument.recompose(); alert("Seguir");  }; //{ alert("Método de exportación desconocido"); return ; }            if ( (opc.pdf) && (!Folder(PATH).exists) )        Folder(PATH).create();            app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;    app.scriptPreferences.enableRedraw = false;        try     {        var ini = Number(opc.ini);        var fin = Number(opc.fin);        var digits = Number(n * (fin - ini + 1)).toString().length;        if (opc.reorder)            do_shuffle(tickets, ini, fin, n, digits, exportF, opc.delay);        else            do_serial(tickets, ini, fin, n, digits, exportF, opc.delay);            if (opc.pdf)             Folder(PATH).execute();    } catch(e) {         alert(e);      } finally     {        app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;        app.scriptPreferences.enableRedraw = true;    }}function calcularVales(doc){    var textFrames = doc.allPageItems.filter( function(pi) { return pi.constructor.name === "TextFrame"; } );     var tickets = textFrames.filter( function(tf) { return tf.label != ''; } );    // max y digits se infieren en el próximo forEach    var maxV = 0;    tickets.forEach( function(t) {         try { var v = Number(t.label.toString()); } catch(e) { alert(e); return null; }        if (v > maxV) maxV = v    } );        return {tf:tickets, n:maxV};}function UI(tickets, sleeping){    var w_rc =     """dialog                 {                     alignment:'row',                     orientation:'row',                    text: 'NUMERAR VALES',                     g1: Panel {                         gP : Group {                             orientation:'row',                            lb2: StaticText { text:'Página Inicial:', }, numIni : EditText { preferredSize:[40,20], text:"1", },                            lb3: StaticText { text:'Página final:', }, numFin : EditText { preferredSize:[40,20], text:"1", },                        },                        gV : Group {                            orientation:'row',                            lb2: StaticText { text:'Número total de vales:', }, vales : EditText { preferredSize:[40,20], text:"", },                        },                        gS : Group {                            orientation:'row',                            lb2: StaticText { text:'Pausar segundos:', }, delay : EditText { preferredSize:[40,20], text:"1", },                            reorder : Checkbox { text:'Reordenar para corte', value:true },                        },                        g12: Group {                            alignment:'left',                            pdf: RadioButton { text:'Exportar a PDF', value:true }, printer: RadioButton { text:'Imprimir', value:false }, noop: RadioButton { text:'Nada', value:false },                        },                        g13: Group {                            orientation:'row', alignment:'fill',                            btOK : Button { text:'Acceptar', },                            btNo : Button { text:'Cancelar', },                        }                    },                  }""";                    var wnd = new Window(w_rc);        var pIni = wnd.g1.gP.numIni;    var pFin = wnd.g1.gP.numFin;    var toPdf = wnd.g1.g12.pdf;    var toPrinter = wnd.g1.g12.printer;    var sleep = wnd.g1.gS.delay;    var shuffle = wnd.g1.gS.reorder; // si queremos que los número se reordenen de cara a cortarlos    var n_old = tickets;    var pi_old = 1;    var pf_old = 1;    sleep.text = sleeping;    wnd.defaultElement = wnd.g1.g13.btOK;    wnd.cancelElement = wnd.g1.g13.btNo;    wnd.result = false;        wnd.g1.gV.vales.text = tickets;        wnd.g1.g13.btOK.onClick = function() { wnd.result = true; wnd.close(); };        wnd.g1.gV.vales.onActivate = function() {         n_old = Number(wnd.g1.gV.vales.text);    };    wnd.g1.gV.vales.onDeactivate = function() {         if (n_old != Number(wnd.g1.gV.vales.text)) {            n_old = Number(wnd.g1.gV.vales.text);            wnd.g1.gP.numIni.text = '1';             wnd.g1.gP.numFin.text = Math.ceil(n_old/tickets);         }    };    pIni.onActivate = function() {        pi_old = Number(wnd.g1.gP.numIni.text);    }    pFin.onActivate = function() {        pf_old = Number(wnd.g1.gP.numFin.text);    }    pIni.onDeactivate = function() {        if (pi_old != Number(wnd.g1.gP.numIni.text)) {            pi_old = Number(wnd.g1.gP.numIni.text);            wnd.g1.gV.vales.text = (pf_old - pi_old + 1)*tickets;        }    }    pFin.onDeactivate = function() {        if (pf_old = Number(wnd.g1.gP.numFin.text) ) {            pf_old = Number(wnd.g1.gP.numFin.text);            wnd.g1.gV.vales.text = (pf_old - pi_old + 1)*tickets;        }    }        toPdf.onClick = function() { sleep.text = '0'; }    toPrinter.onClick = function() { sleep.text = '2'; }        pFin.active = true;        wnd.show();    if (wnd.result && pFin.text != '' && pIni.text != '')    {        return { ini:Number(pIni.text)                , fin:Number(pFin.text)               , pdf:toPdf.value               , printer:toPrinter.value                , delay:Number(sleep.text)               , reorder:shuffle.value               };    }}function formatInteger(digits, value)/*  Si valor, como cadena, tiene menos de `digits` digitos, añadir por la izquierda ceros */{	value = value + "";	while ( value.length < digits )		value = '0' + value;			return value;}function export_to_pdf(i, digits, firstCall){	var prefExportacion = "PDF Alta DECO"; 	app.pdfExportPreferences.viewPDF = false;	    var showExportPreferences = firstCall;    //    var rangoIni = formatInteger(digits, 1   + Number(max*i) );//    var rangoFin = formatInteger(digits, max + Number(max*i) );    var rango = formatInteger(digits, (Number(i)+1))    //    var dest = new File(PATH + 'vales_' + rangoIni + '-' + rangoFin + '.pdf')    var dest = new File(PATH + 'Vales_' + rango.toString());        app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;    app.activeDocument.exportFile(ExportFormat.pdfType, dest, showExportPreferences);	    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;}function export_to_printer(i, digits, firstCall){    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;    app.activeDocument.print(firstCall);    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;}app.doScript(main,    ScriptLanguage.JAVASCRIPT   , null  , UndoModes.FAST_ENTIRE_SCRIPT  , 'Generar Vales');