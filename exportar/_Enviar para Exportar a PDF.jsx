#target indesign#targetengine "medianis"#strict on#include "~/_scripts/lib/Preflight.jsx"#include "~/_scripts/lib/LibExportServer.jsx"function loadConfigFile(configFile) {    var cfg = File(configFile);    if (!cfg.exists) return null;        trim = function (s) { return s.replace(/^\s+/, '').replace(/\s+$/, ''); }        cfg.open("r");    var data = {};    while (! cfg.eof ) {        var rd = cfg.readln().split('=');        if (rd.length > 1) {            data[trim(rd[0])] = trim(rd[1]);        }    }    cfg.close();    return data;}function UI(ServerPresets, callBack) {    var w_rc =     """window {         alignChildren:'fill',         mPanel : Panel {           alignChildren:'fill',           row1: Group {               alignChildren:'fill',              lb1 : StaticText { text:'Opciones de exportación PDF en servidor', },              preset : DropDownList {},           },           row2: Group {              alignChildren:'fill',              spread : Checkbox { text:'Exportar en pliegos', value:true },              lb : StaticText { preferredSize:[250,10], },              bOk : Button { text:'Enviar' },              bCn : Button { text:'Cancelar' },           },         },         checkPanel : Panel {           alignChildren:'fill',           gPreset : Group {              alignChildren:'fill',              bCheck : Button { text:'Comprobación preliminar' },              Preset : DropDownList {},           },           g1 : Group {              logLb  : StaticText { text:'Advertencias e información de documento a exportar' },              ErrLb  : StaticText { text:'[Errores: No disponible]' },           },           logMsg : ListBox { },         },          }""";        var w = new Window(w_rc);    var preflightAlerts;    var alertCount;    var wpreset = w.mPanel.row1.preset;    var preflight_preset = w.checkPanel.gPreset.Preset;    var logMsg = w.checkPanel.logMsg;    var bCheck = w.checkPanel.gPreset.bCheck;    var ErrLb = w.checkPanel.g1.ErrLb;    var button_ok = w.mPanel.row2.bOk;    var button_cancel = w.mPanel.row2.bCn;        wpreset.add('item', '---------- ÚLTIMO UTILIZADO ----------');    wpreset.selection = wpreset.items[0];        if (ServerPresets)        for (var item in ServerPresets)            wpreset.add('item', ServerPresets[item]);                var presets = Preflight.getPresets();    for (var i=0; i<presets.length; ++i) {        var p = preflight_preset.add('item', presets[i]);    }    preflight_preset.selection = preflight_preset.items[0];    bCheck.onClick = function() {        var r = Preflight.checkDocument(null, preflight_preset.selection.toString());        preflightAlerts = r[0];        alertCount = r[1];        show_alerts();    }    var show_alerts = function() {        logMsg.removeAll();        for (var i=0; i<preflightAlerts.length; ++i)            logMsg.add('item', preflightAlerts[i]);                              ErrLb.text = '[Errores: ' + alertCount + ']';    }    button_cancel.onClick = function() { this.window.close(); }    button_ok.onClick = function() {         var p = (wpreset.selection.toString() === '---------- ÚLTIMO UTILIZADO ----------') ?                 undefined               : wpreset.selection.toString();        var Options = { pliegos : w.mPanel.row2.spread.value                      , preset  : p                      }        this.window.close();         callBack(Options);     }        w.cancelElement = button_cancel;    bCheck.onClick();        var b = logMsg.windowBounds;     logMsg.preferredSize = [logMsg.itemSize[0]*alertCount, b[3]];    show_alerts(preflightAlerts);    w.show();}var fileName;function main() {    if (app.documents.count() > 0) {        var Config = loadConfigFile('~/pdf_svr.cfg');        if ( Config != null ) {            var INDESIGN_FOLDER = Folder(Config.INDESIGN_FOLDER);            var ServerPresets = loadConfigFile(INDESIGN_FOLDER + '/presets_svr.cfg');            var sendToServer = function(Options) {                if (app.activeDocument) {                                       fileName = app.activeDocument.name;                                        save_pdf_export_pref(INDESIGN_FOLDER.fsName + '/' + fileName, Options);                                        app.activeDocument.saveACopy(File(INDESIGN_FOLDER.fsName + '/' + fileName));                                                                /*                      task = app.idleTasks.add( {name:fileName, sleep:3000} );                    task.addEventListener("onIdle", alertWhenFinish);                    */                    alert('ENVIADO CON ÉXITO\n\nEl archivo ['                          + fileName + '] se está exportando en el servidor.');                }            }            UI(ServerPresets, sendToServer);         }    }}// TODO: por ahora desconectado la alerta de fin de procesofunction alertWhenFinish(idleEvent) {    var Config = loadConfigFile('~/pdf_svr.cfg');    if (!Config) { app.idleTasks.itemByName(fileName).sleep = 0; return ; }        var INDESIGN_FOLDER = Folder(Config.INDESIGN_FOLDER);    var PDF_FOLDER = Folder(Config.PDF_FOLDER);    var indesign = idleEvent.currentTarget.name;    var pdf = indesign.split('.indd')[0] + '.pdf';        if (!File(INDESIGN_FOLDER.fsName + '/' + indesign).exists        && File(PDF_FOLDER.fsName + '/' + pdf).exists)     {        if (confirm('PDF exportado: ' + pdf + '\n¿Mostrarlo en Finder?'))            PDF_FOLDER.execute();                  app.idleTasks.itemByName(fileName).sleep = 0;      }}main();