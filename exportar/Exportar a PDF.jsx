#script "Exportar a PDF"#target "Indesign"#targetengine "medianis"#strict on#include "../lib/pageRanges.jsx"main();// ---------------------------------------------------------------------------------------------------------------function main(){    var Pref = UI_ExportOptions(                    checkDocumentBeforeExport,                     '~/Desktop/');                         if (Pref !== null)        exportDocumentToPDF(Pref);}// ---------------------------------------------------------------------------------------------------------------function UI_ExportOptions(checkFunction, exportPath, pageRange){    var noDocuments = (app.documents.length === 0);    var baseName = noDocuments ? "" : app.activeDocument.name.toString().split('.indd')[0];    var pageRange = (noDocuments || app.activeDocument.pages.length == 1) ? '1' : '1-' + app.activeDocument.pages.length    var pageNumber = '';        var wrc =         """dialog {                alignChildren:'fill',                mainPanel : Panel {                    alignChildren:'fill',                    gDst : Group {                        lb1 : StaticText { text:'Carpeta Destino:' },                        destinationFolder : EditText { preferredSize:[600,20], text:'""" + exportPath + """' },                         bDst: Button { text:'...', preferredSize:[20,20] },                    },                    gOpen : Group {                        chkOpen : Checkbox { text:'Exportar TODOS los documentos abiertos', value:false },                        chkFolder : Checkbox { text:'Exportar carpeta', value:false },                        folder : EditText { preferredSize:[288,20], visible:false },                    },                    gNom : Group {                        lb1 : StaticText { text:'Nombre base pdf destino:', },                        baseName : EditText { preferredSize:[541,20], text:'""" + baseName + """' },                    }                    gPag : Group {                        lb1 : StaticText { text:'Rango de páginas:', },                        edRango : EditText { preferredSize:[240,20], text:'""" + pageRange + """' },                        lb2 : StaticText { text:'Numerar a partir de:', },                        cbSpread: Checkbox { text:'Exportar en pliegos', value:false, },                        PagXPag : Checkbox { text:'Cada página por separado', value:true },                    },                    gPdf : Group {                        lb1 : StaticText { text:'Preferencias de exportación', },                        preset : DropDownList {},                        cbPref : Checkbox { text:'Mostrar preferencias PDF', value:false },                        cbViewPDF : Checkbox { text:'Abrir PDF', value:false },                    },                },                checkPanel : Panel {                    alignChildren:'fill',                    gPreset : Group {                        alignChildren:'fill',                        bCheck : Button { text:'Comprobación preliminar' },                        Preset : DropDownList {},                    },                    g1 : Group {                        logLb  : StaticText { text:'Advertencias e información de documento a exportar' },                        ErrLb  : StaticText { text:'[Errores: No disponible]' },                    },                    logMsg : ListBox { preferredSize:[0,200] },                },                gButtons : Group {                    bOk : Button { text:'Aceptar', },                    lb1 : StaticText { preferredSize:[600,0] },                    bCn : Button { text:'Cancelar', },                },            }        """;           var wnd = new Window(wrc);            wnd.result = {};        wnd.defaultElement = wnd.gButtons.bOk;    wnd.cancelElement = wnd.gButtons.bCn;        wnd.mainPanel.gDst.bDst.onClick = function() {            var fld = Folder.selectDialog ("Carpeta de destino");            if (fld != undefined)                wnd.mainPanel.gDst.destinationFolder.text = fld.fullName;        }        wnd.mainPanel.gOpen.chkOpen.onClick = function() {        this.window.mainPanel.gNom.visible = !(this.value);            }    // Generate a list with all PDF Export Presets ---------------------------------------------------------------    var getPDFExportPresets = function(dropDown) {           for (var i=0; i<app.pdfExportPresets.length; ++i)        {            var sitem = app.pdfExportPresets.item(i).name;            dropDown.add('item', sitem);                          if (dropDown.selection == undefined && sitem.toUpperCase().indexOf('IMPRENTA') >= 0)                dropDown.selection = dropDown.items[i];        }    }    var getPreflightPresets = function(dropDown) {        var isMedianis = false;        for (var i=0; i<app.preflightProfiles.length; ++i)        {            var sitem =  app.preflightProfiles[i].name;            dropDown.add('item', sitem);                        if (sitem.toUpperCase() == 'MEDIANIS') {                isMedianis = true;                dropDown.selection = dropDown.items[i]            }        }            if (!isMedianis)        {            dropDown.add('item', '*Medianis');            dropDown.selection = dropDown.items[dropDown.length - 1];        }    }    // Check Document for common errors and inform the UI in logMessages -----------------------------------------      var preflightCheck = function(doc, checkFunction) {        wnd.mainPanel.enabled = false;        wnd.checkPanel.enabled = false;        var result = checkFunction(doc, wnd.checkPanel.gPreset.Preset.selection.toString());        wnd.mainPanel.enabled = true;        wnd.checkPanel.enabled = true;                var logMessages = result[0];        var numErrors = result[1];                wnd.checkPanel.g1.ErrLb.text = '[Errores: ' + numErrors + ']';        wnd.checkPanel.logMsg.removeAll();                if (numErrors > 0)        {            var warningImage = ScriptUI.newImage('/Users/javi/prg/javascript/indesign/util/.images/warning.png');            for (var i=0; i<logMessages.length; ++i)            {                           wnd.checkPanel.logMsg.add('item', logMessages[i]);               if (wnd.checkPanel.logMsg.items[wnd.checkPanel.logMsg.items.length-1].text[0] != ' ')                wnd.checkPanel.logMsg.items[wnd.checkPanel.logMsg.items.length-1].image = warningImage;            }        }        else {            wnd.checkPanel.logMsg.add('item', ' Ningún error');                        var okImage = ScriptUI.newImage('/Users/javi/prg/javascript/indesign/util/.images/ok.png');            wnd.checkPanel.logMsg.items[0].image = okImage;        }            return numErrors;    }    // -----------------------------------------------------------------------------------------------------------    getPDFExportPresets(wnd.mainPanel.gPdf.preset);    getPreflightPresets(wnd.checkPanel.gPreset.Preset);        var nErrors = 0;        if (!noDocuments && app.activeDocument.pages.length < 10)        preflightCheck(app.activeDocument, checkFunction);        wnd.mainPanel.gPag.PagXPag.onClick = function() {        if (this.value && this.window.mainPanel.gNom.baseName.text.slice(-1) != '_')            this.window.mainPanel.gNom.baseName.text += '_';        if (!this.value && this.window.mainPanel.gNom.baseName.text.slice(-1) == '_')            this.window.mainPanel.gNom.baseName.text = this.window.mainPanel.gNom.baseName.text.slice(0,-1);                }        wnd.checkPanel.gPreset.bCheck.onClick = function() {         nErrors = preflightCheck(checkFunction, app.activeDocument);    }    wnd.mainPanel.gOpen.chkFolder.onClick = function()    {        if (this.window.mainPanel.gOpen.chkFolder.value) {            var folder = Folder.selectDialog();            if (folder != null)                this.window.mainPanel.gOpen.folder.text = folder.fullName;            else {                this.window.mainPanel.gOpen.chkFolder.value = false;                return ;            }        }        else             this.window.mainPanel.gOpen.folder.text = "";                    this.window.mainPanel.gOpen.folder.visible = this.window.mainPanel.gOpen.chkFolder.value;    }    // Ok button, export to pdf --------------------------------------------------------------------------------------    wnd.gButtons.bOk.onClick = function() {        wnd.close();                if (!nErrors || confirm('¿Exportar a pesar de los errores detectados?', true, 'Aviso de errores')) {            this.window.Pref = { exportPath:wnd.mainPanel.gDst.destinationFolder.text + '/'                   , baseName:wnd.mainPanel.gNom.baseName.text                   , pageRange:wnd.mainPanel.gPag.edRango.text                   , spreads:wnd.mainPanel.gPag.cbSpread.value                   , individualPages:wnd.mainPanel.gPag.PagXPag.value                   , exportPreset:wnd.mainPanel.gPdf.preset.selection.text                   , viewPDF:wnd.mainPanel.gPdf.cbViewPDF.value                   , showPreferences:wnd.mainPanel.gPdf.cbPref.value                   , documentosAbiertos:wnd.mainPanel.gOpen.chkOpen.value                   , fromFolder:wnd.mainPanel.gOpen.chkFolder.value                   , folder:wnd.mainPanel.gOpen.folder.value                   };        }    }    wnd.Pref = null;        if (noDocuments)    {        wnd.mainPanel.gNom.baseName.enabled = false;        wnd.mainPanel.gPag.edRango.enabled = false;        wnd.mainPanel.gOpen.chkOpen.enabled = false;        wnd.checkPanel.enabled = false;                wnd.onShow = function() { wnd.mainPanel.gOpen.chkFolder.value = true; wnd.mainPanel.gOpen.chkFolder.onClick(); }    }        wnd.show();        return wnd.Pref;}// ---------------------------------------------------------------------------------------------------------------function checkDocumentBeforeExport(doc, preset)/*  Check for common errors in the active document    and return an array of two values, a string list with the warnings and the number of warnings    */{    warnings = [];               // activate preflight profiles     doc.preflightOptions.preflightWorkingProfile = preset;    doc.preflightOptions.preflightOff = false;        doc.activeProcess.waitForProcess();         var errors = doc.activeProcess.aggregatedResults[2];    var numErrors = 0;        doc.preflightOptions.preflightOff = true;        if (errors.length)    {        var msg = '';        for (i=0; i<errors.length; ++i)        {            var id = errors[i][0];                        if (id == '1')                msg = errors[i][1];            else if (id == '2') {                msg += ': [' + errors[i][1] + ']';                warnings.push(msg);            }            else {                var pag = (errors[i][2] != '') ?  ' en página ' + errors[i][2] : '';                warnings.push('     ' + errors[i][1] + pag);                numErrors++;            }        }    }        return [warnings, numErrors];}function getExportPreset(byName){        for (var i=0; i<app.pdfExportPresets.length; ++i)        {            var sitem = app.pdfExportPresets.item(i).name;                                     if (sitem == byName)                return app.pdfExportPresets.item(i);        }        return null;}// ---------------------------------------------------------------------------------------------------------------// FIXME: refactorizar para que se le pase el documento a exportar como parámetrofunction exportDocumentToPDF(Pref) {    app.pdfExportPreferences.exportReaderSpreads = Pref.spreads;  	app.pdfExportPreferences.viewPDF = Pref.viewPDF;           var pages = getPagesToExportFromRange(Pref.pageRange);    if (Pref.spreads)        pages = removeDuplicateSpreadPages(doc, pages);	var pbar = new ProgressBar(pages.length);	pbar.show();		    var docs = [];    if (Pref.documentosAbiertos === true)        docs = app.documents    else if (Pref.fromFolder)        docs = []; // FIXME: cargar todos los documentos indd desde una carpeta    else        docs = [app.activeDocument];            var exportPreset = app.pdfExportPresets.item(Pref.exportPreset);            for (var i=0; i<docs.length; ++i) {        var doc = docs[i];                // Si todos los documentos, el nombre base no es correcto.        if (Pref.documentosAbiertos === true)            Pref.baseName = doc.name.toString().split('.indd')[0];                    if (Pref.individualPages)            for (var i=0; i<pages.length; ++i)            {                var name = Pref.exportPath + Pref.baseName;                 var number = parseInt(doc.pages[0].name) + i;                if (pages.length > 1)                    name += normalizeNumber(number, pages.slice(-1));                name += '.pdf';                                app.pdfExportPreferences.pageRange = String(number);                doc.exportFile(ExportFormat.PDF_TYPE,                                File(name),                                (i===0) ? Pref.showPreferences : false, // mostrar pref. de pdf solo primera vez                               exportPreset);                                                     pbar.increment();                           }        else {            app.pdfExportPreferences.pageRange = pages.join(',');                                       doc.exportFile(ExportFormat.PDF_TYPE,                                 new File(Pref.exportPath + Pref.baseName + '.pdf'),                                 Pref.showPreferences, exportPreset);        }    }	// -----------------------------------------------------------------------------------------------------------	pbar.close();}// ---------------------------------------------------------------------------------------------------------------function ProgressBar(iter){	this.createProgressBar = function(iter)	{		this.wndResource =			"window \			 { \				orientation:'row', \				alignChildren:'bottomr', \				text: 'PROGRESO', \				mainPanel: Panel \				{ \					label1: StaticText { text: 'Progreso total', preferredSize:[275, 20], }, \					pgBar1: Progressbar { text: '', preferredSize:[275, 10], maxvalue:'" + iter + "' }, \					labelLog: StaticText { text: '', preferredSize:[275,20], }, \				}, \			 }"		this.wnd = new Window(this.wndResource);	}	this.increment = function(step)	{		if (step == undefined) step = 1;		if (this.wnd.mainPanel.pgBar1.value + step <= this.wnd.mainPanel.pgBar1.maxvalue)			this.wnd.mainPanel.pgBar1.value = (this.wnd.mainPanel.pgBar1.value + step);		else			this.wnd.mainPanel.pgBar1.value = this.wnd.mainPanel.pgBar1.maxvalue-1;	}	this.show = function() { this.wnd.show(); }	this.close = function() { this.wnd.close(); }	this.hide = function() { this.wnd.hide(); }	this.update = function() { this.hide(); this.show(); }	this.createProgressBar(iter);	return this;}// ---------------------------------------------------------------------------------------------------------------