Object.prototype.merge = function (self, obj) {	if (!obj) return;		var merged_obj = self;	for (var name in obj) {		merged_obj[name] = obj[name];	}	return merged_obj;}Object.prototype.clone = function (self) {	// speeds things up if we're cloning an array	if (this instanceof Array) return self.slice(0);	if (this instanceof String) return self.substring(0);	// the normal route for any other object	// though it might not work on some built-in	// application-specific objects	return new self.constructor().merge(self);}Object.prototype.serialize = function (self) {	if (! (this instanceof Object)) return [];        var r = [];    for (var item in this) {        try { r.push(item + '='  + this[item]); } catch(e) {};    }            return r;}var pref = app.pdfExportPreferences.serialize().concat();var file = File('~/tmp/test.cfg');file.open("w");for (var i=0; i<pref.length; ++i)    file.writeln(pref[i]);file.close();